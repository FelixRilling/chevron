{"version":3,"sources":["es6/chevron.amd.js"],"names":[],"mappings":"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","file":"chevron.amd.js","sourcesContent":["define('chevron', function () { 'use strict';\n\n    const _more = \": \";\n    const _error = \"error in \";\n    const _factory = \"factory\";\n    const _service = \"service\";\n    const _isUndefined = \" is undefined\";\n\n    /**\n     * Checks if service exist, else add it\n     *\n     * @param {String} type The type of the service (service/factory)\n     * @param {Function} cf The Constructor function of the service\n     * @param {String} name The name to register/id the service\n     * @param {Array} deps List of dependencies\n     * @param {Function} fn Content of the service\n     * @returns {Object} Returns `this`\n     */\n    function provider (type, cf, name, deps, fn) {\n        const _this = this;\n\n        if (_this.chev[name]) {\n            //throw error if a service with this name already exists\n            throw _this.id + _more + _error + name + \" already exists\";\n        } else {\n            //Add the service to container\n            _this.chev[name] = {\n                type,\n                cf,\n                name,\n                deps,\n                fn,\n                init: false\n            };\n\n            return _this;\n        }\n    }\n\n    /**\n     * Adds a new service type\n     *\n     * @param {String} type The name of the type\n     * @param {Function} cf Constructor function to init the service with\n     * @returns {Object} Returns `this`\n     */\n    function extend (type, cf) {\n        const _this = this;\n\n        //Add customType method to container\n        _this[type] = function (name, deps, fn) {\n            return _this.provider(type, cf, name, deps, fn);\n        };\n\n        return _this;\n    }\n\n    /**\n     * Collects dependencies and initializes service\n     *\n     * @private\n     * @param {Object} _this The context\n     * @param {Object} service The service to check\n     * @param {Object} list The list of dependencies\n     * @returns {Object} Returns `service`\n     */\n    function initialize (_this, service, list) {\n        if (!service.init) {\n            const bundle = [];\r\n\n            //Collect an ordered Array of dependencies\n            service.deps.forEach(item => {\n                const dependency = list[item];\n\n                if (dependency) {\n                    bundle.push(dependency.fn);\n                }\n            });\n\n            //Init service\n            //Call Constructor fn with service/deps\n            service = service.cf(service, bundle);\n            service.init = true;\n        }\n\n        return service;\n    }\n\n    /**\n     * Loops trough dependencies, recurse if new dependencies has dependencies itself; then execute fn.\n     *\n     * @private\n     * @param {Object} _this The context\n     * @param {Array} service The dependencyList to iterate\n     * @param {Function} fn The function run over each dependency\n     * @returns void\n     */\n    function recurseDependencies(_this, service, fn) {\n        //loop trough deps\n        service.deps.forEach(name => {\n            const dependency = _this.chev[name];\n\n            if (dependency) {\n                //recurse over sub-deps\n                recurseDependencies(_this, dependency, fn);\n                //run fn\n                fn(dependency);\n            } else {\n                //if not found error with name\n                throw _this.id + _more + _error + service.name + _more + \"dependency \" + name + _isUndefined;\n            }\n        });\n    }\n\n    /**\n     * Check if every dependency is available\n     *\n     * @private\n     * @param {Object} _this The context\n     * @param {Object} service The service to prepare\n     * @returns {Object} Initialized service\n     */\n    function prepare(_this, service) {\n        const list = {};\n\n        //Recurse trough service deps\n        recurseDependencies(\n            _this,\n            service,\n            //run this over every dependency to add it to the dependencyList\n            dependency => {\n                //make sure if dependency is initialized, then add\n                list[dependency.name] = initialize(_this, dependency, list);\n            }\n        );\n\n        return initialize(_this, service, list);\n    }\n\n    /**\n     * Access service with dependencies bound\n     *\n     * @param {String} name The Name of the service\n     * @returns {*} Returns Content of the service\n     */\n    function access(name) {\n        const _this = this,\n            accessedService = _this.chev[name];\n\n        //Check if accessed service is registered\n        if (accessedService) {\n            //Call prepare with bound context\n            return prepare(_this, accessedService).fn;\n        }\n    }\n\n    /**\n     * Creates method entry for service\n     *\n     * @private\n     * @param {Object} _this The context\n     * @returns Returns void\n     */\n    function initService(_this) {\n        _this.extend(_service, function(service, bundle) {\n            //Construct service\n            const serviceFn = service.fn;\n\n            service.fn = function() {\n                //Chevron service function wrapper\n                return serviceFn.apply(null, bundle.concat(Array.from(arguments)));\n            };\n\n            return service;\n        });\n    }\n\n    /**\n     * Creates method entry for factory\n     *\n     * @private\n     * @param {Object} _this The context\n     * @returns Returns void\n     */\n    function initFactory(_this) {\n        _this.extend(_factory, function(service, bundle) {\n            //Construct factory\n\n            //First value gets ignored by calling new like this, so we need to fill it\n            bundle.unshift(null);\n\n            //Apply into new constructor by accessing bind proto. from: http://stackoverflow.com/questions/1606797/use-of-apply-with-new-operator-is-this-possible\n            service.fn = new(Function.prototype.bind.apply(service.fn, bundle));\n\n            return service;\n        });\n    }\n\n    /**\r\n     * Basic Chevron Constructor\r\n     *\r\n     * @constructor\r\n     * @param {String} id To identify the instance\r\n     * @returns {Object} Returns Chevron instance\r\n     */\r\n    let Chevron = function(id) {\r\n        const _this = this;\r\n\r\n        //Instance Id\r\n        _this.id = id || \"cv\";\r\n        //Instance container\r\n        _this.chev = {};\r\n\r\n        //Init default types\r\n        initService(_this);\r\n        initFactory(_this);\r\n    };\r\n\r\n    /**\r\n     * Expose Chevron methods\r\n     */\r\n    Chevron.prototype = {\r\n        //Core service/factory method\r\n        provider,\r\n        //Prepare/init services/factory with deps injected\r\n        access,\r\n        //Add new service type\r\n        extend\r\n    };\n\n    return Chevron;\n\n});"]}