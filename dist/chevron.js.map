{"version":3,"sources":["chevron.js"],"names":[],"mappingsfile":"chevron.js","sourcesContent":["var Chevron = (function () {\n'use strict';\n\n/**\n * Adds a new module type to the Chevron instance\n * @param {String} type The name of the type\n * @param {Function} cf Constructor function to init the module with\n * @returns {Object} Chevron instance\n */\n\nvar extend = function extend(type, cf) {\n    var _this = this;\n\n    //Add customType method to container\n    _this[type] = function (name, deps, fn) {\n        return _this.provider(type, //static\n        cf, //static\n        name, //dynamic\n        deps, //dynamic\n        fn //dynamic\n        );\n    };\n\n    return _this;\n};\n\n/**\n * Collects dependencies and initializes module\n * @private\n * @param {Object} _module The module to check\n * @param {Object} list The list of dependencies\n * @param {Function} cf The Constructor function\n * @returns {Object} Initialized module\n */\n\nvar constructModule = function constructModule(_module, list, constructorFunction) {\n    var dependencies = [];\n    var result = void 0;\n\n    //Collect an ordered Array of dependencies\n    _module.deps.forEach(function (item) {\n        var dependency = list[item];\n\n        //If the dependency name is found in the list of deps, add it\n        if (dependency) {\n            dependencies.push(dependency.fn);\n        }\n    });\n\n    //Call Constructor fn with module and dependencies\n    result = constructorFunction(_module, dependencies);\n    result.rdy = true;\n\n    return result;\n};\n\n/**\n * Loops trough dependencies, recurse if new dependencies has dependencies itself; then execute fn.\n * @private\n * @param {Object} $map The chevron container\n * @param {Array} _module The module to recurse\n * @param {Function} fn The function run over each dependency\n */\n\nvar recurseDependencies = function recurseDependencies($map, _module, fn) {\n    _module.deps.forEach(function (name) {\n        var dependency = $map.get(name);\n\n        if (dependency) {\n            //recurse over sub-deps\n            recurseDependencies($map, dependency, fn);\n            //run fn\n            fn(dependency);\n        } else {\n            //if the dependency is not found, throw error with name\n            throw new Error(_module.name + \" is missing dep '\" + name + \"'\");\n        }\n    });\n};\n\n/**\n * Inits module and all dependencies\n * @private\n * @param {Object} chev The chevron container\n * @param {Object} _module The module to prepare\n * @param {Function} cf The constructor function\n * @returns {Object} Initialized module\n */\nvar initialize = function initialize($map, _module, constructorFunction) {\n    var list = {};\n\n    //Recurse trough module dependencies\n    recurseDependencies($map, _module,\n    //run this over every dependency to add it to the dependencyList\n    function (dependency) {\n        //Add the dependency, and init it if its not ready\n        list[dependency.name] = dependency.rdy ? dependency : dependency.init();\n    });\n\n    return constructModule(_module, list, constructorFunction);\n};\n\n/**\n * Adds a new module to the container\n * @param {String} type The type of the module. ex: \"factory\"\n * @param {Function} cf The constructor function of the module\n * @param {String} name The name to register the module under. ex: \"myFactory\"\n * @param {Array} deps Array of dependenciy names\n * @param {Function} fn Content of the module\n * @returns {Object} Chevron instance\n */\nvar provider = function provider(type, constructorFunction, name, deps, fn) {\n    var _this = this;\n    var entry = {\n        type: type, //Type of the module\n        name: name, //Name of the module\n        deps: deps, //Array of dependencies\n        fn: fn, //Module content function\n        rdy: false, //If the module is ready to access\n        init: function init() {\n            return initialize(_this.$map, entry, constructorFunction); //init the module\n        }\n    };\n\n    //Saves entry to chev container\n    _this.$map.set(name, entry);\n\n    return _this;\n};\n\n/**\n * Access module with dependencies bound\n * @param {String} name The name of the module to access\n * @returns {Mixed} Initialized Object content\n */\n\nvar access = function access(name) {\n  return this.$map.get(name).init().fn;\n};\n\n/**\n * Constructor function for the service module type\n * @private\n * @param {Object} _module The module object\n * @param {Array} dependencies Array of dependencies\n * @returns {Mixed} Initialized module\n */\n\nvar service = function service(_module, dependencies) {\n    //Dereference fn to avoid unwanted recursion\n    var serviceFn = _module.fn;\n\n    _module.fn = function () {\n        //Chevron service function wrapper\n        //return function with args injected\n        return serviceFn.apply(null, dependencies.concat(Array.from(arguments)));\n    };\n\n    return _module;\n};\n\n/**\n * Constructor function for the factory module type\n * @private\n * @param {Object} _module The module object\n * @param {Array} dependencies Array of dependencies\n * @returns {Mixed} Initialized module\n */\n\nvar factory = function factory(_module, dependencies) {\n  //First value gets ignored by calling 'new' like this, so we need to fill it with something\n  dependencies.unshift(0);\n\n  //Apply into new constructor by binding applying the bind method.\n  //@see: {@link http://stackoverflow.com/questions/1606797/use-of-apply-with-new-operator-is-this-possible }\n  _module.fn = new (Function.prototype.bind.apply(_module.fn, dependencies))();\n\n  return _module;\n};\n\n/**\n * Chevron Constructor\n * @constructor\n * @returns {Object} Chevron instance\n */\nvar Chevron = function Chevron() {\n    var _this = this;\n\n    //Instance container\n    _this.$map = new Map();\n\n    //Init default types\n    _this.extend(\"service\", service);\n    _this.extend(\"factory\", factory);\n\n    return _this;\n};\n\n/**\n * Expose Chevron methods\n */\nChevron.prototype = {\n    extend: extend, //Creates a new module type\n    provider: provider, //Adds a new custom module to the container\n    access: access //Returns initialized module\n};\n\nreturn Chevron;\n\n}());\n"]}