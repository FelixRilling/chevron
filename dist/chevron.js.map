{"version":3,"sources":["chevron.js"],"names":[],"mappings":";;AAAA,IAAI,UAAW,YAAY;AACvB;;AAEA,QAAM,QAAQ,IAAd;AACA,QAAM,WAAW,SAAjB;AACA,QAAM,WAAW,SAAjB;AACA,QAAM,eAAe,eAArB;AACA,QAAM,cAAc,SAAd,WAAc,CAAU,KAAV,EAAiB;AAC7B,eAAO,MAAM,EAAN,GAAW,KAAX,GAAmB,WAA1B;AACH,KAFL;;AAIA;;;;;;;;;AASA,aAAS,QAAT,CAAkB,IAAlB,EAAwB,IAAxB,EAA8B,IAA9B,EAAoC,EAApC,EAAwC;AACpC,YAAM,QAAQ,IAAd;;AAEA,YAAI,MAAM,IAAN,CAAW,IAAX,CAAJ,EAAsB;AAClB;AACA,kBAAM,YAAY,KAAZ,IAAqB,IAArB,GAA4B,iBAAlC;AACH,SAHD,MAGO;AACH;AACA,kBAAM,IAAN,CAAW,IAAX,IAAmB;AACf,0BADe;AAEf,0BAFe;AAGf,0BAHe;AAIf,sBAJe;AAKf,sBAAM;AALS,aAAnB;;AAQA,mBAAO,KAAP;AACH;AACJ;;AAED;;;;;;;AAOA,aAAS,MAAT,CAAiB,IAAjB,EAAuB,WAAvB,EAAoC;AAChC,YAAM,QAAQ,IAAd;;AAEA;AACA,cAAM,EAAN,CAAS,IAAT,IAAiB,WAAjB;;AAEA;AACA,cAAM,IAAN,IAAc,UAAU,IAAV,EAAgB,IAAhB,EAAsB,EAAtB,EAA0B;AACpC,mBAAO,MAAM,QAAN,CAAe,IAAf,EAAqB,IAArB,EAA2B,IAA3B,EAAiC,EAAjC,CAAP;AACH,SAFD;;AAIA,eAAO,KAAP;AACH;;AAED;;;;;;;;;AASA,aAAS,UAAT,CAAqB,KAArB,EAA4B,OAA5B,EAAqC,IAArC,EAA2C;AACvC,YAAI,SAAS,EAAb;;AAEA,YAAI,CAAC,QAAQ,IAAb,EAAmB;AACf,oBAAQ,IAAR,CAAa,OAAb,CAAqB,gBAAQ;AACzB,oBAAM,aAAa,KAAK,IAAL,CAAnB;;AAEA,oBAAI,UAAJ,EAAgB;AACZ,2BAAO,IAAP,CAAY,WAAW,EAAvB;AACH;AACJ,aAND;;AAQA;AACA,sBAAU,MAAM,EAAN,CAAS,QAAQ,IAAjB,EAAuB,OAAvB,EAAgC,MAAhC,CAAV;AACA,oBAAQ,IAAR,GAAe,IAAf;AACH;;AAED,eAAO,OAAP;AACH;;AAED;;;;;;;;;AASA,aAAS,mBAAT,CAA6B,KAA7B,EAAoC,OAApC,EAA6C,EAA7C,EAAiD;AAC7C;AACA,gBAAQ,IAAR,CAAa,OAAb,CAAqB,gBAAQ;AACzB,gBAAM,aAAa,MAAM,IAAN,CAAW,IAAX,CAAnB;;AAEA,gBAAI,UAAJ,EAAgB;AACZ;AACA,oCAAoB,KAApB,EAA2B,UAA3B,EAAuC,EAAvC;AACA;AACA,mBAAG,UAAH;AACH,aALD,MAKO;AACH;AACA,sBAAM,YAAY,KAAZ,IAAqB,QAAQ,IAA7B,GAAoC,KAApC,GAA4C,aAA5C,GAA4D,IAA5D,GAAmE,YAAzE;AACH;AACJ,SAZD;AAaH;;AAED;;;;;;;;AAQA,aAAS,OAAT,CAAkB,KAAlB,EAAyB,OAAzB,EAAkC;AAC9B,YAAM,OAAO,EAAb;;AAEA;AACA,4BACI,KADJ,EAEI,OAFJ;AAGI;AACA,8BAAc;AACV;AACA,iBAAK,WAAW,IAAhB,IAAwB,WAAW,KAAX,EAAkB,UAAlB,EAA8B,IAA9B,CAAxB;AACH,SAPL;;AAUA,eAAO,WAAW,KAAX,EAAkB,OAAlB,EAA2B,IAA3B,CAAP;AACH;;AAED;;;;;;AAMA,aAAS,MAAT,CAAiB,IAAjB,EAAuB;AACnB,YAAM,QAAQ,IAAd;AAAA,YACI,kBAAkB,MAAM,IAAN,CAAW,IAAX,CADtB;;AAGA;AACA,YAAI,eAAJ,EAAqB;AACjB;AACA,mBAAO,QAAQ,KAAR,EAAe,eAAf,EAAgC,EAAvC;AACH,SAHD,MAGO;AACH;AACA,kBAAM,YAAY,KAAZ,IAAqB,IAArB,GAA4B,KAA5B,GAAoC,IAApC,GAA2C,YAAjD;AACH;AACJ;;AAED;;;;;;;AAOA,aAAS,WAAT,CAAsB,KAAtB,EAA6B;AACzB,cAAM,MAAN,CAAa,QAAb,EAAuB,UAAU,OAAV,EAAmB,MAAnB,EAA2B;AAC9C;AACA,gBAAM,YAAY,QAAQ,EAA1B;;AAEA,oBAAQ,EAAR,GAAa,YAAY;AACrB;AACA,uBAAO,UAAU,KAAV,CAAgB,IAAhB,EAAsB,OAAO,MAAP,CAAc,MAAM,IAAN,CAAW,SAAX,CAAd,CAAtB,CAAP;AACH,aAHD;;AAKA,mBAAO,OAAP;AACH,SAVD;AAWH;;AAED;;;;;;;AAOA,aAAS,WAAT,CAAsB,KAAtB,EAA6B;AACzB,cAAM,MAAN,CAAa,QAAb,EAAuB,UAAU,OAAV,EAAmB,MAAnB,EAA2B;AAC9C;;AAEA;AACA,mBAAO,OAAP,CAAe,IAAf;;AAEA;AACA,oBAAQ,EAAR,GAAa,KAAI,SAAS,SAAT,CAAmB,IAAnB,CAAwB,KAAxB,CAA8B,QAAQ,EAAtC,EAA0C,MAA1C,CAAJ,GAAb;;AAEA,mBAAO,OAAP;AACH,SAVD;AAWH;;AAED;;;;;;;AAOA,QAAI,UAAU,SAAV,OAAU,CAAU,EAAV,EAAc;AACxB,YAAM,QAAQ,IAAd;;AAEA;AACA,cAAM,EAAN,GAAW,MAAM,IAAjB;AACA;AACA,cAAM,EAAN,GAAW,EAAX;AACA;AACA,cAAM,IAAN,GAAa,EAAb;;AAEA;AACA,oBAAY,KAAZ;AACA,oBAAY,KAAZ;AACH,KAbD;;AAeA;;;AAGA,YAAQ,SAAR,GAAoB;AAChB;AACA,0BAFgB;AAGhB;AACA,sBAJgB;AAKhB;AACA;AANgB,KAApB;;AASA,WAAO,OAAP;AAEH,CA/Oc,EAAf","file":"chevron.js","sourcesContent":["var Chevron = (function () {\n    'use strict';\n\n    const _more = \": \";\n    const _factory = \"factory\";\n    const _service = \"service\";\n    const _isUndefined = \" is undefined\";\n    const _errorStart = function (_this) {\n            return _this.id + _more + \"error in \";\n        };\n\n    /**\n     * Checks if service exist, else add it\n     *\n     * @param {String} type The type of the service (service/factory)\n     * @param {String} name The name to register/id the service\n     * @param {Array} deps List of dependencies\n     * @param {Function} fn Content of the service\n     * @return {Object} `this`\n     */\n    function provider(type, name, deps, fn) {\n        const _this = this;\n\n        if (_this.chev[name]) {\n            //throw error if a service with this name already exists\n            throw _errorStart(_this) + name + \" already exists\";\n        } else {\n            //Add the service to container\n            _this.chev[name] = {\n                type,\n                name,\n                deps,\n                fn,\n                init: false\n            };\n\n            return _this;\n        }\n    }\n\n    /**\n     * Adds a new service type\n     *\n     * @param {String} type The name of the type\n     * @param {Function} transformer Call this when the service is constructed\n     * @return {Object} `this`\n     */\n    function extend (type, transformer) {\n        const _this = this;\n\n        //Add transformer to typeList\n        _this.tl[type] = transformer;\n\n        //Add customType method to container\n        _this[type] = function (name, deps, fn) {\n            return _this.provider(type, name, deps, fn);\n        };\n\n        return _this;\n    }\n\n    /**\n     * Collects dependencies and initializes service\n     * \n     * @private\n     * @param {Object} _this The context\n     * @param {Object} service The service to check\n     * @param {Object} list The list of dependencies\n     * @return {Object} `service`\n     */\n    function initialize (_this, service, list) {\n        let bundle = [];\n\n        if (!service.init) {\n            service.deps.forEach(item => {\n                const dependency = list[item];\n\n                if (dependency) {\n                    bundle.push(dependency.fn);\n                }\n            });\n\n            //Init service\n            service = _this.tl[service.type](service, bundle);\n            service.init = true;\n        }\n\n        return service;\n    }\n\n    /**\n     * Loops trough dependencies, recurse if new dependencies has dependencies itself; then execute fn.\n     *\n     * @private\n     * @param {Object} _this The context\n     * @param {Array} service The dependencyList to iterate\n     * @param {Function} fn The function run over each dependency\n     * @return void\n     */\n    function recurseDependencies(_this, service, fn) {\n        //loop trough deps\n        service.deps.forEach(name => {\n            const dependency = _this.chev[name];\n\n            if (dependency) {\n                //recurse over sub-deps\n                recurseDependencies(_this, dependency, fn);\n                //run fn\n                fn(dependency);\n            } else {\n                //if not found error with name\n                throw _errorStart(_this) + service.name + _more + \"dependency \" + name + _isUndefined;\n            }\n        });\n    }\n\n    /**\n     * Check if every dependency is available\n     *\n     * @private\n     * @param {Object} _this The context\n     * @param {Object} service The service to prepare\n     * @return {Object} Initialized service\n     */\n    function prepare (_this, service) {\n        const list = {};\n\n        //Recurse trough service deps\n        recurseDependencies(\n            _this,\n            service,\n            //run this over every dependency to add it to the dependencyList\n            dependency => {\n                //make sure if dependency is initialized, then add\n                list[dependency.name] = initialize(_this, dependency, list);\n            }\n        );\n\n        return initialize(_this, service, list);\n    }\n\n    /**\n     * Access service with dependencies bound\n     *\n     * @param {String} name The Name of the service\n     * @return {*} Content of the service\n     */\n    function access (name) {\n        const _this = this,\n            accessedService = _this.chev[name];\n\n        //Check if accessed service is registered\n        if (accessedService) {\n            //Call prepare with bound context\n            return prepare(_this, accessedService).fn;\n        } else {\n            //throw error if service does not exist\n            throw _errorStart(_this) + name + _more + name + _isUndefined;\n        }\n    }\n\n    /**\n     * Creates typeList entry for service\n     *\n     * @private\n     * @param {Object} _this The context\n     * @return void\n     */\n    function initService (_this) {\n        _this.extend(_service, function (service, bundle) {\n            //Construct service\n            const serviceFn = service.fn;\n\n            service.fn = function () {\n                //Chevron service function wrapper\n                return serviceFn.apply(null, bundle.concat(Array.from(arguments)));\n            };\n\n            return service;\n        });\n    }\n\n    /**\n     * Creates typeList entry for factory\n     *\n     * @private\n     * @param {Object} _this The context\n     * @return void\n     */\n    function initFactory (_this) {\n        _this.extend(_factory, function (service, bundle) {\n            //Construct factory\n\n            //First value gets ignored by calling new like this, so we need to fill it\n            bundle.unshift(null);\n\n            //Apply into new constructor by accessing bind proto. from: http://stackoverflow.com/questions/1606797/use-of-apply-with-new-operator-is-this-possible\n            service.fn = new(Function.prototype.bind.apply(service.fn, bundle));\n\n            return service;\n        });\n    }\n\n    /**\n     * Basic Chevron Constructor\n     *\n     * @constructor\n     * @param {String} id To identify the instance\n     * @returns {Object} Returns Chevron instance\n     */\n    let Chevron = function (id) {\n        const _this = this;\n\n        //Instance Id\n        _this.id = id || \"cv\";\n        //Instance transformerList\n        _this.tl = {};\n        //Instance container\n        _this.chev = {};\n\n        //Init default types\n        initService(_this);\n        initFactory(_this);\n    };\n\n    /**\n     * Expose Chevron methods\n     */\n    Chevron.prototype = {\n        //Core service/factory method\n        provider,\n        //Prepare/init services/factory with deps injected\n        access,\n        //Add new service type\n        extend\n    };\n\n    return Chevron;\n\n}());"]}