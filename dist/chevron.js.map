{"version":3,"sources":["chevron.js"],"names":[],"mappings":"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","file":"chevron.js","sourcesContent":["var Chevron = (function () {\n    'use strict';\n\n    const _more = \": \";\n    const _factory = \"factory\";\n    const _service = \"service\";\n    const _error = _more + \"error in \";\n    const _isUndefined = \" is undefined\";\n\n    /**\r\n     * Checks if service exist, else add it\r\n     * @param String name to register/id the service\r\n     * @param Array list of dependencies\r\n     * @param String type of service (service/factory)\r\n     * @param Function content of the service\r\n     * @return Chevron instance\r\n     */\r\n    function provider(type, name, deps, fn) {\r\n        let _this = this;\r\n\r\n        if (_this.chev[name]) {\r\n            //throw error if a service with this name already exists\r\n            throw _this.id + _more + name + \" already exists\";\r\n        } else {\r\n            //Add the service to container\r\n            _this.chev[name] = {\r\n                type,\r\n                name,\r\n                deps,\r\n                fn,\r\n                init: false\r\n            };\r\n\r\n            return _this;\r\n        }\r\n    }\n\n    /**\n     * Adds a new service type\n     * @param String name of the type\n     * @param fn to call when the service is constructed\n     * @return Chevron instance\n     */\n    function extend (type, fn) {\n        let _this = this;\n\n        _this.tl[type] = fn;\n        _this[type] = function (name, deps, fn) {\n            return _this.provider(type, name, deps, fn);\n        }\n\n        return _this;\n    }\n\n    /**\r\n     * Misc Utility functions\r\n     */\r\n    let _each = function(arr, fn) {\r\n        for (let i = 0, l = arr.length; i < l; i++) {\r\n            fn(arr[i], i);\r\n        }\r\n    };\n\n    /**\r\n     * Collects dependencies and initializes service\r\n     * @private\r\n     * @param Object context\r\n     * @param Object service to check\r\n     * @param Object list of dependencies\r\n     * @return Object service\r\n     */\r\n    function initialize(_this, service, list) {\r\n        let bundle = [];\r\n\r\n        if (!service.init) {\r\n            _each(service.deps, item => {\r\n                let dep = list[item];\r\n\r\n                if (dep) {\r\n                    bundle.push(dep.fn);\r\n                }\r\n            });\r\n\r\n            //Init service\r\n            service = _this.tl[service.type](service, bundle);\r\n            service.init = true;\r\n        }\r\n\r\n        return service;\r\n    }\n\n    /**\r\n     * Loops/recurses over list of dependencies\r\n     * @private\r\n     * @param Object context\r\n     * @param Array dependencyList to iterate\r\n     * @param Function to run over each dependency\r\n     * @return void\r\n     */\r\n    //Loops trough dependencies, recurse if new dependencies has dependencies itself; then execute fn.\r\n    function r(_this, service, fn) {\r\n        //loop trough deps\r\n        _each(service.deps, name => {\r\n            let dependency = _this.chev[name];\r\n\r\n            if (dependency) {\r\n                //recurse over deps\r\n                r(_this, dependency, fn);\r\n                //run fn\r\n                fn(dependency);\r\n            } else {\r\n                //if not found error with name\r\n                throw _this.id + _error + service.name + _more + \"dependency \" + name + _isUndefined;\r\n            }\r\n        });\r\n    }\n\n    /**\n     * Check if every dependency is available\n     * @private\n     * @param Object context\n     * @param Object service to check\n     * @return bound service\n     */\n    function prepare (_this, service) {\n        let list = {};\n\n        //Recurse trough service deps\n        r(\n            _this,\n            service,\n            //run this over every dependency to add it to the dependencyList\n            dependency => {\n                //make sure if dependency is initialized, then add\n                list[dependency.name] = initialize(_this, dependency, list);\n            }\n        );\n\n        return initialize(_this, service, list);\n    }\n\n    /**\n     * Access service with dependencies bound\n     * @param String name of the service\n     * @return Function with dependencies bound\n     */\n    function access (name) {\n        let _this = this,\n            accessedService = _this.chev[name];\n\n        //Check if accessed service is registered\n        if (accessedService) {\n            //Call prepare with bound context\n            return prepare(_this, accessedService).fn;\n        } else {\n            //throw error if service does not exist\n            throw _this.id + _error + name + _more + name + _isUndefined;\n        }\n    }\n\n    /**\n     * Creates typeList entry for service\n     * @private\n     * @param Object context\n     * @return void\n     */\n    function initService (_this) {\n\n        _this.extend(_service, function (service, bundle) {\n            //Construct service\n            let serviceFn = service.fn;\n\n            service.fn = function () {\n                //Chevron service function wrapper\n                return serviceFn.apply(null, bundle.concat(Array.from(arguments)));\n            };\n\n            return service;\n        });\n    }\n\n    /**\n     * Creates typeList entry for factory\n     * @private\n     * @param Object context\n     * @return void\n     */\n    function initFactory (_this) {\n        _this.extend(_factory, function (service, bundle) {\n            //Construct factory\n            //first value gets ignored by calling new like this, so we need to fill it\n            bundle.unshift(null);\n            //Apply into new constructor by accessing bind proto. from: http://stackoverflow.com/questions/1606797/use-of-apply-with-new-operator-is-this-possible\n            service.fn = new(Function.prototype.bind.apply(service.fn, bundle));\n\n            return service;\n        });\n    }\n\n    /**\n     * Basic Chevron Constructor\n     * @constructor\n     * @param String to id the container\n     */\n    let Chevron = function (id) {\n        let _this = this;\n\n        _this.id = id || \"cv\";\n        _this.chev = {};\n        _this.tl = {};\n\n        initService(_this);\n        initFactory(_this);\n    };\n\n    /**\n     * Expose Chevron methods\n     */\n    Chevron.prototype = {\n        //Core service/factory method\n        provider,\n        //Prepare/init services/factory with deps injected\n        access,\n        //Add new service type\n        extend\n    };\n\n    return Chevron;\n\n}());"]}