{"version":3,"sources":["chevron.js"],"names":[],"mappings":"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","file":"chevron.js","sourcesContent":["var Chevron = (function () {\n    'use strict';\n\n    //add new service/fn\n    function add (name, deps, type, fn, args) {\r\n        this.chev[name] = {\r\n            name,\r\n            type,\r\n            deps,\r\n            args: args || [],\r\n            fn,\r\n            init: false\r\n        };\n    }\n\n    const _error = \": error in \";\n    const _factory = \"factory\";\n    const _service = \"service\";\n    const _isUndefined=\" is undefined\";\n\n    //Pushes new service/factory\r\n    function provider(name, deps, type, fn, args) {\r\n        let _this = this;\r\n\r\n        if (_this.chev[name]) {\r\n            throw `${_this.id}${_error}${type}: ${_service} '${name}' is already defined`;\r\n        } else {\r\n            add.apply(_this, arguments);\r\n\r\n            return _this;\r\n        }\r\n    }\n\n    //Create new service\n    function service (name, deps, fn) {\n        return this.provider(\n            name,\n            deps,\n            _service,\n            fn\n        );\n    }\n\n    //Create new factory\n    function factory (name, deps, Constructor, args) {\r\n        return this.provider(\n            name,\r\n            deps,\n            _factory,\n            Constructor,\n            args\n        );\n    }\n\n    //Utility functions\n    var util = {\n        _each: function (arr, fn) {\n            for (let i = 0, l = arr.length; i < l; i++) {\n                fn(arr[i], i);\n            }\n        },\n        _eachObject: function (object, fn) {\n            let keys = Object.keys(object);\n\n            this._each(keys, (key, i) => {\n                fn(object[key], key, i);\n            });\n        }\n    };\n\n    //Initialized service and sets init to true\n    function initialize (service, bundle) {\n        if (service.type === _service) {\n            //Construct service\n            let serviceFn = service.fn;\n\n            service.fn = function () {\n                //Chevron service function wrapper\n                return serviceFn.apply(null,\n                    Array.from(bundle.concat(Array.from(arguments)))\n                );\n            };\n        } else {\n            //Construct factory\n            bundle = bundle.concat(service.args);\n            bundle.unshift(null);\n            //Apply into new constructor by accessing bind proto. from: http://stackoverflow.com/questions/1606797/use-of-apply-with-new-operator-is-this-possible\n            service.fn = new(Function.prototype.bind.apply(service.fn, bundle));\n        }\n\n        service.init = true;\n        return service;\n    }\n\n    //collect dependencies from string, and initialize them if needed\n    function bundle (service, list) {\n        let bundle = [];\r\n\r\n        util._eachObject(list, (item, key) => {\r\n            if (service.deps.includes(key)) {\n                bundle.push(item);\n            }\n        });\n\n        if (!service.init) {\n            return initialize(service, Array.from(bundle));\n        } else {\n            return service;\n        }\n    }\n\n    //Loops trough dependencies, recurse if new dependencies has dependencies itself; then execute fn.\n    function r(container, dependencyList, fn, error) {\n        util._each(dependencyList, name => {\n            let service = container[name];\n            if (service) {\n\n                if (service.deps.length > 0) {\r\n                    //recurse\n                    r(container, service.deps, fn, error);\r\n                }\n                fn(service);\n            } else {\n                error(name);\n            }\n        });\n    }\n\n    //Main access function; makes sure that every service need is available\n    function prepare (service) {\n        let _this = this,\n            list = {};\n\n        r(\n            _this.chev,\n            service.deps,\r\n            dependency => {\n                list[dependency.name] = bundle(dependency, list).fn;\r\n            },\n            name => {\n                throw `${_this.id}${_error}${service.name}: dependency '${name}'${_isUndefined}`;\r\n            }\n        );\n\n        return bundle(service, list);\n    }\n\n    //Returns prepared service\r\n    function access(name) {\r\n        let _this = this,\r\n            accessedService = _this.chev[name];\r\n\r\n        //Check if accessed service is registered\r\n        if (accessedService) {\r\n            return prepare.call(_this, accessedService).fn;\r\n        } else {\r\n            throw `${_this.id}${_error}${name}: '${name}'${_isUndefined}`;\r\n        }\r\n    }\n\n    let Container = function (id) {\n        let _this = this;\n\n        _this.id = id || \"cv\";\n        _this.chev = {};\n    };\n\n    Container.prototype = {\n        //Core service/factory method\n        provider,\n        //create new service\n        service,\n        //create new factory\n        factory,\n        //prepare/iialize services/factory with deps injected\n        access\n    };\n\n    return Container;\n\n}());"]}