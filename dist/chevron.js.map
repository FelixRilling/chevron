{"version":3,"sources":["chevron.js"],"names":[],"mappings":"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","file":"chevron.js","sourcesContent":["var Chevron = (function () {\n    'use strict';\n\n    const _more = \": \";\n    const _error = \"error in \";\n    const _factory = \"factory\";\n    const _service = \"service\";\n    const _isUndefined = \" is undefined\";\n\n    /**\r\n     * Checks if service exist, else add it\r\n     *\r\n     * @param {String} type The type of the service (service/factory)\r\n     * @param {String} name The name to register/id the service\r\n     * @param {Array} deps List of dependencies\r\n     * @param {Function} fn Content of the service\r\n     * @return {Object} `this`\r\n     */\r\n    function provider(type, name, deps, fn) {\r\n        const _this = this;\r\n\r\n        if (_this.chev[name]) {\r\n            //throw error if a service with this name already exists\r\n            throw _this.id + _more + _error + name + \" already exists\";\r\n        } else {\r\n            //Add the service to container\r\n            _this.chev[name] = {\r\n                type,\r\n                name,\r\n                deps,\r\n                fn,\r\n                init: false\r\n            };\r\n\r\n            return _this;\r\n        }\r\n    }\n\n    /**\r\n     * Adds a new service type\r\n     *\r\n     * @param {String} type The name of the type\r\n     * @param {Function} transformer Call this when the service is constructed\r\n     * @return {Object} `this`\r\n     */\r\n    function extend(type, transformer) {\r\n        const _this = this;\r\n\r\n        //Add transformer to typeList\r\n        _this.tl[type] = transformer;\r\n\r\n        //Add customType method to container\r\n        _this[type] = function(name, deps, fn) {\r\n            return _this.provider(type, name, deps, fn);\r\n        };\r\n\r\n        return _this;\r\n    }\n\n    /**\r\n     * Collects dependencies and initializes service\r\n     *\r\n     * @private\r\n     * @param {Object} _this The context\r\n     * @param {Object} service The service to check\r\n     * @param {Object} list The list of dependencies\r\n     * @return {Object} `service`\r\n     */\r\n    function initialize(_this, service, list) {\r\n        if (!service.init) {\r\n            let bundle = [];\r\n\r\n            service.deps.forEach(item => {\r\n                const dependency = list[item];\r\n\r\n                if (dependency) {\r\n                    bundle.push(dependency.fn);\r\n                }\r\n            });\r\n\r\n            //Init service\r\n            service = _this.tl[service.type](service, bundle);\r\n            service.init = true;\r\n        }\r\n\r\n        return service;\r\n    }\n\n    /**\r\n     * Loops trough dependencies, recurse if new dependencies has dependencies itself; then execute fn.\r\n     *\r\n     * @private\r\n     * @param {Object} _this The context\r\n     * @param {Array} service The dependencyList to iterate\r\n     * @param {Function} fn The function run over each dependency\r\n     * @return void\r\n     */\r\n    function recurseDependencies(_this, service, fn) {\r\n        //loop trough deps\r\n        service.deps.forEach(name => {\r\n            const dependency = _this.chev[name];\r\n\r\n            if (dependency) {\r\n                //recurse over sub-deps\r\n                recurseDependencies(_this, dependency, fn);\r\n                //run fn\r\n                fn(dependency);\r\n            } else {\r\n                //if not found error with name\r\n                throw _this.id + _more + _error + service.name + _more + \"dependency \" + name + _isUndefined;\r\n            }\r\n        });\r\n    }\n\n    /**\r\n     * Check if every dependency is available\r\n     *\r\n     * @private\r\n     * @param {Object} _this The context\r\n     * @param {Object} service The service to prepare\r\n     * @return {Object} Initialized service\r\n     */\r\n    function prepare(_this, service) {\r\n        const list = {};\r\n\r\n        //Recurse trough service deps\r\n        recurseDependencies(\r\n            _this,\r\n            service,\r\n            //run this over every dependency to add it to the dependencyList\r\n            dependency => {\r\n                //make sure if dependency is initialized, then add\r\n                list[dependency.name] = initialize(_this, dependency, list);\r\n            }\r\n        );\r\n\r\n        return initialize(_this, service, list);\r\n    }\n\n    /**\r\n     * Access service with dependencies bound\r\n     *\r\n     * @param {String} name The Name of the service\r\n     * @return {*} Content of the service\r\n     */\r\n    function access(name) {\r\n        const _this = this,\r\n            accessedService = _this.chev[name];\r\n\r\n        //Check if accessed service is registered\r\n        if (accessedService) {\r\n            //Call prepare with bound context\r\n            return prepare(_this, accessedService).fn;\r\n        } else {\r\n            //throw error if service does not exist\r\n            throw false;\r\n        }\r\n    }\n\n    /**\r\n     * Creates typeList entry for service\r\n     *\r\n     * @private\r\n     * @param {Object} _this The context\r\n     * @return void\r\n     */\r\n    function initService(_this) {\r\n        _this.extend(_service, function(service, bundle) {\r\n            //Construct service\r\n            const serviceFn = service.fn;\r\n\r\n            service.fn = function() {\r\n                //Chevron service function wrapper\r\n                return serviceFn.apply(null, bundle.concat(Array.from(arguments)));\r\n            };\r\n\r\n            return service;\r\n        });\r\n    }\n\n    /**\r\n     * Creates typeList entry for factory\r\n     *\r\n     * @private\r\n     * @param {Object} _this The context\r\n     * @return void\r\n     */\r\n    function initFactory(_this) {\r\n        _this.extend(_factory, function(service, bundle) {\r\n            //Construct factory\r\n\r\n            //First value gets ignored by calling new like this, so we need to fill it\r\n            bundle.unshift(null);\r\n\r\n            //Apply into new constructor by accessing bind proto. from: http://stackoverflow.com/questions/1606797/use-of-apply-with-new-operator-is-this-possible\r\n            service.fn = new(Function.prototype.bind.apply(service.fn, bundle));\r\n\r\n            return service;\r\n        });\r\n    }\n\n    /**\r\n     * Basic Chevron Constructor\r\n     *\r\n     * @constructor\r\n     * @param {String} id To identify the instance\r\n     * @returns {Object} Returns Chevron instance\r\n     */\r\n    let Chevron = function(id) {\r\n        const _this = this;\r\n\r\n        //Instance Id\r\n        _this.id = id || \"cv\";\r\n        //Instance transformerList\r\n        _this.tl = {};\r\n        //Instance container\r\n        _this.chev = {};\r\n\r\n        //Init default types\r\n        initService(_this);\r\n        initFactory(_this);\r\n    };\r\n\r\n    /**\r\n     * Expose Chevron methods\r\n     */\r\n    Chevron.prototype = {\r\n        //Core service/factory method\r\n        provider,\r\n        //Prepare/init services/factory with deps injected\r\n        access,\r\n        //Add new service type\r\n        extend\r\n    };\n\n    return Chevron;\n\n}());"]}