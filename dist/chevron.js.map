{"version":3,"file":"chevron.js","sources":["../node_modules/lightdash/dist/esm/src/object/name.js","esm/src/bootstrap/DefaultBootstrappings.js","esm/src/scope/DefaultScopes.js","esm/src/Chevron.js","esm/src/decorators/Injectable.js","esm/src/decorators/Autowired.js"],"sourcesContent":["import { isObject, isString, isSymbol } from \"lodash\";\n/**\n * Gets name of a value.\n *\n * If the value has a name or description property, the value of that is returned.\n * If the value is a string, it is returned as is.\n * Otherwise null is returned.\n *\n * @since 10.2.0\n * @memberOf Object\n * @param value Value to check.\n * @returns The name of the value.\n * @example\n * name(class Foo{})\n * // => \"Foo\"\n *\n * name(function bar(){})\n * // => \"bar\"\n *\n * name(Symbol(\"abc\"))\n * // => \"abc\"\n *\n * name(\"foo\")\n * // => \"foo\"\n *\n * name(1)\n * // => null\n */\nconst name = (value) => {\n    if (isString(value)) {\n        return value;\n    }\n    // eslint-disable-next-line no-extra-parens\n    if (isObject(value) && isString(value.name)) {\n        // eslint-disable-next-line no-extra-parens\n        return value.name;\n    }\n    if (isSymbol(value) && isString(value.description)) {\n        return value.description;\n    }\n    return null;\n};\nexport { name };\n//# sourceMappingURL=name.js.map","import { isFunction } from \"lodash\";\nconst createNonFunctionInitializerError = () => new TypeError(\"Non-functions cannot be bootstrapped by this bootstrapper.\");\nconst classBootstrapping = (initializer, dependencies) => {\n    if (!isFunction(initializer)) {\n        throw createNonFunctionInitializerError();\n    }\n    return Reflect.construct(initializer, dependencies);\n};\nconst functionBootstrapping = (initializer, dependencies) => (...args) => {\n    if (!isFunction(initializer)) {\n        throw createNonFunctionInitializerError();\n    }\n    return initializer(...dependencies, ...args);\n};\nconst identityBootstrapping = (initializer) => initializer;\nconst DefaultBootstrappings = {\n    CLASS: classBootstrapping,\n    FUNCTION: functionBootstrapping,\n    IDENTITY: identityBootstrapping\n};\nexport { DefaultBootstrappings };\n//# sourceMappingURL=DefaultBootstrappings.js.map","const singletonScope = (context, injectableEntryName) => `SINGLETON_${injectableEntryName}`;\nconst prototypeScope = () => null;\nconst DefaultScopes = {\n    SINGLETON: singletonScope,\n    PROTOTYPE: prototypeScope\n};\nexport { DefaultScopes };\n//# sourceMappingURL=DefaultScopes.js.map","import { defaults, isNil } from \"lodash\";\nimport { name as getName } from \"lightdash\";\nimport { DefaultBootstrappings } from \"./bootstrap/DefaultBootstrappings\";\nimport { DefaultScopes } from \"./scope/DefaultScopes\";\n/**\n * Tries to guess the string name of a nameable value. if none can be determined, an error is thrown.\n * See {@link getName} for details.\n *\n * @private\n * @param value Value to to guess a name for.\n * @return Name of the value.\n * @throws TypeError when to name can be guessed.\n */\nconst guessName = (value) => {\n    const guessedName = getName(value);\n    if (isNil(guessedName)) {\n        throw new TypeError(`Could not guess name of ${value}, please explicitly define one.`);\n    }\n    return guessedName;\n};\n/**\n * Injectable container class.\n *\n * @public\n * @class\n */\nclass Chevron {\n    /**\n     * Creates a new, empty container.\n     *\n     * @public\n     * @constructor\n     */\n    constructor() {\n        this.injectables = new Map();\n    }\n    /**\n     * Registers a new injectable on this container.\n     *\n     * @public\n     * @param initializer Initial value of this injectable. This can be any value, but usually  a class or a different kind of function.\n     *      During retrieval, the initial value might be transformed by the bootstrapper (see {@link Bootstrapping} for details).\n     *      If no name is provided in the options (see description of the options parameter, section \"name\"),\n     *      a name will be determined from the initializer through {@link getName}.\n     * @param dependencies Definitions of this injectables dependencies. Values can be either plain strings (\"MyOtherService\"),\n     *      or a value which is nameable. For details on nameable values see {@link getName}.\n     * @param options Options for this injectable. The following options exist:\n     *      <ul>\n     *          <li>name:\n     *                  Name for this injectable. If this is not provided, the name will be determined based on the initializer.\n     *                  (see description of the initializer parameter)\n     *          </li>\n     *          <li>bootstrapping:\n     *                  Bootstrapping strategy to use when instantiating this injectable (see {@link Bootstrapping} for details).\n     *                  By default, {@link DefaultBootstrappings.IDENTITY} is used. If your injectable is a class or factory function,\n     *                  consider using {@link DefaultBootstrappings.CLASS} or {@link DefaultBootstrappings.FUNCTION} instead respectively,\n     *                  or provide your own.\n     *          </li>\n     *          <li>scope:\n     *                  Scoping strategy to use when retrieving instances (see {@link Scope} for details).\n     *                  By default, {@link DefaultScopes.SINGLETON} is used. For different use cases,\n     *                  see {@link DefaultScopes.PROTOTYPE} or provide your own.\n     *          </li>\n     *      </ul>\n     * @throws Error when an injectable with the requested name is already registered.\n     * @throws TypeError when no name can be determined for this injectable or any of its dependencies.\n     */\n    registerInjectable(initializer, dependencies, options = {}) {\n        const { bootstrapping, scope, name } = defaults(options, {\n            bootstrapping: DefaultBootstrappings.IDENTITY,\n            scope: DefaultScopes.SINGLETON,\n            name: null\n        });\n        const injectableEntryName = !isNil(name)\n            ? name\n            : guessName(initializer);\n        if (this.injectables.has(injectableEntryName)) {\n            throw new Error(`Name already exists: '${injectableEntryName}'.`);\n        }\n        this.injectables.set(injectableEntryName, {\n            initializer,\n            bootstrapping,\n            scope,\n            dependencies: dependencies.map(dependencyName => guessName(dependencyName)),\n            instances: new Map()\n        });\n    }\n    /**\n     * Checks if an injectable with the name provided is registered for this container, regardless if its instantiated or not.\n     * To check if an injectable is registered and instantiated, see {@link #hasInjectableInstance}.\n     *\n     * @public\n     * @param name Either a raw string name or a nameable value that should be checked for. See {@link #registerInjectable} for details.\n     * @return if an injectable with the name provided is registered on this container.\n     * @throws TypeError when no name can be determined for the provided nameable.\n     */\n    hasInjectable(name) {\n        return this.injectables.has(guessName(name));\n    }\n    /**\n     * Checks if an injectable with the name provided is registered and instantiated for this container.\n     * To check if an injectable is registered without checking for instantiation, see {@link #hasInjectable}.\n     *\n     * @public\n     * @param name Either a raw string name or a nameable value that should be checked for. See {@link #registerInjectable} for details.\n     * @param context Context to be used for instance checks. See {@link Scope} for details.\n     * @return if an injectable with the name provided is registered and instantiated on this container.\n     * @throws TypeError when no name can be determined for the provided nameable.\n     */\n    hasInjectableInstance(name, context = null) {\n        if (!this.hasInjectable(name)) {\n            return false;\n        }\n        const { injectableEntry, instanceName } = this.resolveInjectableInstance(guessName(name), context);\n        return (instanceName != null && injectableEntry.instances.has(instanceName));\n    }\n    /**\n     * Retrieves an instantiated injectable, recursively instantiating dependencies if they were not instantiated before.\n     *\n     * @public\n     * @param name Either a raw string name or a nameable value that should be retrieved. See {@link #registerInjectable} for details.\n     * @param context Context to be used for instance checks. See {@link Scope} for details.\n     * @return instantiated injectable for the given name.\n     * @throws TypeError when no name can be determined for the provided nameable.\n     * @throws Error when the injectable or a dependency cannot be found.\n     * @throws Error when recursive dependencies are detected.\n     */\n    getInjectableInstance(name, context = null) {\n        return this.getBootstrappedInjectableInstance(guessName(name), context, new Set());\n    }\n    /**\n     * Resolves an injectable by name, providing information about the injectable entry, its name and scope value.\n     *\n     * @private\n     * @param injectableEntryName Raw string name of the injectable.\n     * @param context Context to be used for instance checks. See {@link Scope} for details.\n     * @return data object containing the injectable entry, its name and scope value.\n     * @throws Error if no injectable for the name is found.\n     */\n    resolveInjectableInstance(injectableEntryName, context) {\n        if (!this.injectables.has(injectableEntryName)) {\n            throw new Error(`Injectable '${injectableEntryName}' does not exist.`);\n        }\n        const injectableEntry = this.injectables.get(injectableEntryName);\n        const instanceName = injectableEntry.scope(context, injectableEntryName, injectableEntry);\n        return {\n            injectableEntry,\n            instanceName\n        };\n    }\n    /**\n     * Retrieves an instantiated injectable, recursively instantiating dependencies if they were not instantiated before.\n     *\n     * @private\n     * @param injectableEntryName Raw string name of the injectable.\n     * @param context Context to be used for instance checks. See {@link Scope} for details.\n     * @param resolveStack Stack of previously requested instantiations. used to detect circular dependencies.\n     * @return instantiated injectable for the given name.\n     * @throws Error if no injectable for the name is found.\n     * @throws Error when a dependency cannot be found.\n     * @throws Error when recursive dependencies are detected.\n     */\n    getBootstrappedInjectableInstance(injectableEntryName, context, resolveStack) {\n        const { injectableEntry, instanceName } = this.resolveInjectableInstance(injectableEntryName, context);\n        if (instanceName != null &&\n            injectableEntry.instances.has(instanceName)) {\n            return injectableEntry.instances.get(instanceName);\n        }\n        /*\n         * Start bootstrapping value.\n         */\n        if (resolveStack.has(injectableEntryName)) {\n            throw new Error(`Circular dependencies found: '${[\n                ...resolveStack,\n                injectableEntryName\n            ].join(\"->\")}'.`);\n        }\n        resolveStack.add(injectableEntryName);\n        const bootstrappedDependencies = injectableEntry.dependencies.map(dependencyName => this.getBootstrappedInjectableInstance(dependencyName, context, resolveStack));\n        const instance = injectableEntry.bootstrapping(injectableEntry.initializer, bootstrappedDependencies, injectableEntryName, injectableEntry);\n        if (instanceName != null) {\n            injectableEntry.instances.set(instanceName, instance);\n        }\n        resolveStack.delete(injectableEntryName);\n        return instance;\n    }\n}\nexport { Chevron };\n//# sourceMappingURL=Chevron.js.map","/**\n * Registers a new injectable on a container. See {@link Chevron#registerInjectable} for details.\n *\n * Decorator function for use with TypeScript. Use this decorator on a variable or function/class expression.\n *\n * @public\n * @param instance {@link Chevron} instance to register the injectable on.\n * @param dependencies Definitions of this injectables dependencies. See {@link Chevron#registerInjectable} for details.\n * @param options Options for this injectable. See {@link Chevron#registerInjectable} for details.\n * @throws Error when an injectable with the requested name is already registered.\n * @throws TypeError when no name can be determined for this injectable or any of its dependencies.\n */\nconst Injectable = (instance, dependencies, options = {}) => (target) => {\n    instance.registerInjectable(target, dependencies, options);\n    return target;\n};\nexport { Injectable };\n//# sourceMappingURL=Injectable.js.map","/**\n * Retrieves an instantiated injectable, recursively instantiating dependencies if they were not instantiated before,\n * and sets the value on the field/property for this decorator. See {@link Chevron#getInjectableInstance} for details.\n *\n * Decorator function for use with TypeScript. Use this decorator on a object property or class field.\n *\n * @public\n * @param instance {@link Chevron} instance to retrieve the injectable from.\n * @param name Either a raw string name or a nameable value that should be retrieved. See {@link #registerInjectable} for details.\n * @param context Context to be used for instance checks. See {@link Scope} for details.\n * @throws TypeError when no name can be determined for the provided nameable.\n * @throws Error when the injectable or a dependency cannot be found.\n * @throws Error when recursive dependencies are detected.\n */\nconst Autowired = (instance, name, context = null) => (target, propertyKey) => {\n    target[propertyKey] = instance.getInjectableInstance(name, context);\n};\nexport { Autowired };\n//# sourceMappingURL=Autowired.js.map"],"names":["isString","isObject","isSymbol","isFunction","getName","isNil","defaults"],"mappings":"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"}