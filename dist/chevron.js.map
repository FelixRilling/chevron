{"version":3,"file":"chevron.js","sources":["esm/src/injectableTypes/factory.js","esm/src/injectableTypes/InjectableType.js","esm/src/injectableTypes/plain.js","esm/src/injectableTypes/service.js","esm/src/Chevron.js","esm/src/decorators/Autowired.js","esm/src/decorators/Injectable.js"],"sourcesContent":["/**\n * Built-in factory bootstrapper.\n *\n * @private\n */\nconst factoryBootstrapper = (initializer, dependencies) => Reflect.construct(initializer, dependencies);\nexport { factoryBootstrapper };\n//# sourceMappingURL=factory.js.map","var InjectableType;\n(function (InjectableType) {\n    InjectableType[\"FACTORY\"] = \"factory\";\n    InjectableType[\"SERVICE\"] = \"service\";\n    InjectableType[\"PLAIN\"] = \"plain\";\n})(InjectableType || (InjectableType = {}));\nexport { InjectableType };\n//# sourceMappingURL=InjectableType.js.map","/**\n * Built-in plain bootstrapper.\n *\n * @private\n */\nconst plainBootstrapper = (initializer) => initializer;\nexport { plainBootstrapper };\n//# sourceMappingURL=plain.js.map","/**\n * Built-in service bootstrapper.\n *\n * @private\n */\nconst serviceBootstrapper = (initializer, dependencies) => \n// tslint:disable-next-line:only-arrow-functions\nfunction () {\n    return initializer(...dependencies, ...arguments);\n};\nexport { serviceBootstrapper };\n//# sourceMappingURL=service.js.map","import { factoryBootstrapper } from \"./injectableTypes/factory\";\nimport { InjectableType } from \"./injectableTypes/InjectableType\";\nimport { plainBootstrapper } from \"./injectableTypes/plain\";\nimport { serviceBootstrapper } from \"./injectableTypes/service\";\nimport { isNil } from \"lodash\";\nclass Chevron {\n    /**\n     * Main chevron class.\n     *\n     * @public\n     * @class Chevron\n     */\n    constructor() {\n        this.types = new Map();\n        this.setType(InjectableType.PLAIN, plainBootstrapper);\n        this.setType(InjectableType.SERVICE, serviceBootstrapper);\n        this.setType(InjectableType.FACTORY, factoryBootstrapper);\n        this.injectables = new Map();\n    }\n    /**\n     * Gets a bootstrapped injectable from the chevron instance.\n     *\n     * @public\n     * @param {*} key Key of the injectable to get.\n     * @returns {*} Bootstrapped content of the injectable.\n     * @throws Error when the key cannot be found, or circular dependencies exist.\n     */\n    get(key) {\n        return this.resolveEntry(key, new Set());\n    }\n    /**\n     * Checks if the chevron instance has a given injectable.\n     *\n     * @public\n     * @param {*} key Key of the injectable to check.\n     * @returns {boolean} If the chevron instance has a given injectable.\n     */\n    has(key) {\n        return this.injectables.has(key);\n    }\n    /**\n     * Sets a new injectable on the chevron instance.\n     *\n     * @public\n     * @param {string} type Type of the injectable.\n     * @param {string[]} dependencies Array of dependency keys.\n     * @param {*} initializer Content of the injectable.\n     * @param {*?} key Custom key of the injectable. If none is given, the initializer will be used.\n     * @throws Error when the key already exists, or the type is invalid.\n     */\n    set(type, dependencies, initializer, key) {\n        if (!this.hasType(type)) {\n            throw new Error(`Missing type '${type}'.`);\n        }\n        /*\n         * Infer the key from the initializer only if no key was explicitly given.\n         */\n        const effectiveKey = isNil(key) ? initializer : key;\n        if (this.has(effectiveKey)) {\n            throw new Error(`Key already exists: '${effectiveKey}'.`);\n        }\n        this.injectables.set(effectiveKey, {\n            typeBootstrapper: this.types.get(type),\n            dependencies,\n            initializer,\n            content: null\n        });\n    }\n    /**\n     * Checks if the chevron instance has a given injectable type.\n     *\n     * @public\n     * @param {string} name Name of the injectable type to check.\n     * @returns {boolean} If the chevron instance has a given injectable type.\n     */\n    hasType(name) {\n        return this.types.has(name);\n    }\n    /**\n     * Sets a type of injectables.\n     *\n     * @public\n     * @param {string} name Name of the type.\n     * @param {function} bootstrapperFn Bootstrap function for injectables of this type.\n     */\n    setType(name, bootstrapperFn) {\n        this.types.set(name, bootstrapperFn);\n    }\n    /**\n     * Resolves an entry by its key, keeping track of the access stack.\n     *\n     * @private\n     */\n    resolveEntry(key, accessStack) {\n        if (!this.has(key)) {\n            throw new Error(`Injectable '${key}' does not exist.`);\n        }\n        const entry = this.injectables.get(key);\n        if (isNil(entry.content)) {\n            /*\n             * Entry is not constructed, recursively bootstrap dependencies and the entry itself.\n             */\n            this.bootstrap(key, accessStack, entry);\n        }\n        return entry.content;\n    }\n    /**\n     * Bootstraps an entry, keeping track of the access stack.\n     *\n     * @private\n     */\n    bootstrap(key, accessStack, entry) {\n        /*\n         * Check if we already tried accessing this injectable before; if we did, assume circular dependencies.\n         */\n        if (accessStack.has(key)) {\n            throw new Error(`Circular dependencies found: '${[...accessStack, key].join(\"->\")}'.`);\n        }\n        accessStack.add(key);\n        entry.content = entry.typeBootstrapper(entry.initializer, entry.dependencies.map(dependencyName => this.resolveEntry(dependencyName, accessStack)));\n        accessStack.delete(key);\n    }\n}\nexport { Chevron };\n//# sourceMappingURL=Chevron.js.map","/**\n * Decorator function to be used as TypeScript decorator\n * in order to wire an injectable into a class property.\n *\n * @public\n * @param {Chevron} instance Chevron instance to use.\n * @param {*} key Key of the injectable.\n */\nconst Autowired = (instance, key) => (target, propertyKey) => {\n    target[propertyKey] = instance.get(key);\n};\nexport { Autowired };\n//# sourceMappingURL=Autowired.js.map","/**\n * Decorator function to be used as TypeScript decorator\n * in order to declare a value to be an injectable which is added to the chevron instance.\n *\n * @param {Chevron} instance Chevron instance to use.\n * @param {string} type Type of the injectable.\n * @param {string[]} dependencies Array of dependency keys.\n * @param {*?} key Custom key of the injectable. If none is given, the initializer will be used.\n */\nconst Injectable = (instance, type, dependencies, key) => (target) => {\n    instance.set(type, dependencies, target, key);\n    return target;\n};\nexport { Injectable };\n//# sourceMappingURL=Injectable.js.map"],"names":["InjectableType","isNil"],"mappings":"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"}