{"version":3,"sources":["chevron.js"],"names":[],"mappings":"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","file":"chevron.js","sourcesContent":["var Chevron = (function () {\n    'use strict';\n\n    function provider (name, dependencyList, fn, type, args) {\n        let _this = this;\n\n        if (_this.chev[name]) {\n            throw `${_this.name}: error in ${type}: service '${name}' is already defined`;\n        } else {\n            add(name, dependencyList, type, fn, args);\n\n            return _this;\n        }\n\n        //add new service\n        function add(name, dependencyList, type, fn, args) {\n            let service = _this.chev[name] = {\n                name,\n                type,\n                deps: dependencyList || [],\n                fn,\n                init: false\n            };\n            //Add type specific props\n            if (type === \"factory\") {\n                service.args = args || [];\n            }\n        }\n    }\n\n    function service (name, dependencyList, fn) {\n        return this.provider(\n            name,\n            dependencyList,\n            fn,\n            \"service\"\n        );\n    }\n\n    function factory (name, dependencyList, Constructor, args) {\n        return this.provider(\n            name,\n            dependencyList,\n            Constructor,\n            \"factory\",\n            args\n        );\n    }\n\n    var util = {\n        //Iterate\n        each: function (arr, fn) {\n            for (let i = 0, l = arr.length; i < l; i++) {\n                fn(arr[i], i);\n            }\n        },\n        eachObject: function (object, fn) {\n            let keys = Object.keys(object);\n\n            for (let i = 0, l = keys.length; i < l; i++) {\n                fn(object[keys[i]], keys[i], i);\n            }\n        }\n    };\n\n    function initialize (service, bundle) {\n        if (service.type === \"service\") {\n            let serviceFn = service.fn;\n\n            service.fn = function () {\n                //Chevron service function wrapper\n                return serviceFn.apply(null,\n                    Array.from(bundle.concat(Array.from(arguments)))\n                );\n            };\n        } else {\n            bundle = bundle.concat(service.args);\n            bundle.unshift(null);\n            //Apply into new constructor by accessing bind proto. from: http://stackoverflow.com/questions/1606797/use-of-apply-with-new-operator-is-this-possible\n            service.fn = new(Function.prototype.bind.apply(service.fn, bundle));\n        }\n\n        service.init = true;\n        return service;\n    }\n\n    function bundle (service, list) {\n        let bundle = [];\n\n        util.eachObject(list, (item, key) => {\n            if (service.deps.includes(key)) {\n                bundle.push(item);\n            }\n        });\n\n        if (!service.init) {\n            return initialize(service, Array.from(bundle));\n        } else {\n            return service;\n        }\n    }\n\n    //Iterate deps\n    function r(container, dependencyList, fn, error) {\n        util.each(dependencyList, name => {\n            let service = container[name];\n            if (service) {\n\n                if (service.deps.length > 0) {\n                    //recurse\n                    r(container, service.deps, fn, error);\n                }\n                fn(service);\n            } else {\n                error(name);\n            }\n        });\n    }\n\n    function prepare (chev,service) {\n        let list = {};\n\n        r(\n            chev,\n            service.deps,\n            dependency => {\n                list[dependency.name] = bundle(dependency, list).fn;\n            },\n            name => {\n                throw `${_this.name}: error in ${service.name}: dependency '${name}' is missing`;\n            }\n        );\n\n        return bundle(service, list);\n    }\n\n    function access (name) {\n        let _this = this,\n            accessedService = _this.chev[name];\n\n        //Check if accessed service is registered\n        if (accessedService) {\n            return prepare(_this.chev, accessedService).fn;\n        } else {\n            throw `${_this.name}: error accessing ${name}: '${name}' is not defined`;\n        }\n\n    }\n\n    let Container = function (name) {\n        let _this = this;\n\n        _this.name = name || \"cv\";\n        _this.chev = {};\n\n    };\n\n    Container.prototype = {\n        //Core service/factory method\n        provider,\n        //create new service\n        service,\n        //create new factory\n        factory,\n        //prepare/iialize services/factory with deps injected\n        access\n    };\n\n    return Container;\n\n}());"]}