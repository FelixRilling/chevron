{"version":3,"sources":["chevron.js"],"names":[],"mappings":"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","file":"chevron.js","sourcesContent":["var Chevron = (function () {\n    'use strict';\n\n    //strings\n    var _strings = {\n        _service: \"service\",\n        _factory: \"factory\",\n        _error: \": error in \"\n    };\n\n    //add new service/fn\n    function add (chev, _name, dependencyList, _type, _fn, args) {\n        //External applications should not try to access container props as the keky change between min/normal version; stick to cv.access()\n        let service = chev[_name] = {\n            _name,\n            _type,\n            _deps: dependencyList || [],\n            _fn,\n            _init: false\n        };\n        //Add type specific props\n        if (_type === _strings._factory) {\n            service._args = args || [];\n        }\n    }\n\n    //Pushes new service/factory\n    function provider (name, dependencyList, fn, type, args) {\n        let _this = this;\n\n        if (_this.chev[name]) {\n            throw `${_this.n}${_strings._error}${type}: ${_strings._service} '${name}' is already defined`;\n        } else {\n            add(_this.chev, name, dependencyList, type, fn, args);\n\n            return _this;\n        }\n    }\n\n    //Create new service\n    function service (name, dependencyList, fn) {\n        return this.provider(\n            name,\n            dependencyList,\n            fn,\n            _strings._service\n        );\n    }\n\n    //Create new factory\n    function factory (name, dependencyList, Constructor, args) {\n        return this.provider(\n            name,\n            dependencyList,\n            Constructor,\n            _strings._factory,\n            args\n        );\n    }\n\n    //Utility functions\n    var util = {\n        _each: function (arr, fn) {\n            for (let i = 0, l = arr.length; i < l; i++) {\n                fn(arr[i], i);\n            }\n        },\n        _eachObject: function (object, fn) {\n            let keys = Object.keys(object);\n\n            for (let i = 0, l = keys.length; i < l; i++) {\n                fn(object[keys[i]], keys[i], i);\n            }\n        }\n    };\n\n    //Initialized service and sets init to true\n    function initialize (service, bundle) {\n        if (service._type === _strings._service) {\n            //Construct service\n            let serviceFn = service._fn;\n\n            service._fn = function () {\n                //Chevron service function wrapper\n                return serviceFn.apply(null,\n                    Array.from(bundle.concat(Array.from(arguments)))\n                );\n            };\n        } else {\n            //Construct factory\n            bundle = bundle.concat(service._args);\n            bundle.unshift(null);\n            //Apply into new constructor by accessing bind proto. from: http://stackoverflow.com/questions/1606797/use-of-apply-with-new-operator-is-this-possible\n            service._fn = new(Function.prototype.bind.apply(service._fn, bundle));\n        }\n\n        service._init = true;\n        return service;\n    }\n\n    //collect dependencies from string, and initialize them if needed\n    function bundle (service, list) {\n        let bundle = [];\n\n        util._eachObject(list, (item, key) => {\n            if (service._deps.includes(key)) {\n                bundle.push(item);\n            }\n        });\n\n        if (!service._init) {\n            return initialize(service, Array.from(bundle));\n        } else {\n            return service;\n        }\n\n    }\n\n    //Loops trough dependencies, recurse if new dependencies has dependencies itself; then execute fn.\n    function r(container, dependencyList, fn, error) {\n        util._each(dependencyList, name => {\n            let service = container[name];\n            if (service) {\n\n                if (service._deps.length > 0) {\n                    //recurse\n                    r(container, service._deps, fn, error);\n                }\n                fn(service);\n            } else {\n                error(name);\n            }\n        });\n    }\n\n    //Main access function; makes sure that every service need is available\n    function prepare (service) {\n        let _this = this,\n            list = {};\n\n        r(\n            _this.chev,\n            service._deps,\n            dependency => {\n                list[dependency._name] = bundle(dependency, list)._fn;\n            },\n            name => {\n                throw `${_this.n}${_strings._error}${service._name}: dependency '${name}' missing`;\n            }\n        );\n\n        return bundle(service, list);\n    }\n\n    //Returns prepared service\n    function access (name) {\n        let _this = this,\n            accessedService = _this.chev[name];\n\n        //Check if accessed service is registered\n        if (accessedService) {\n            return prepare.call(_this, accessedService)._fn;\n        } else {\n            throw `${_this.n}${_strings._error}${name}: '${name}' is undefined`;\n        }\n\n    }\n\n    let Container = function (name) {\n        let _this = this;\n\n        _this.n = name || \"cv\";\n        _this.chev = {};\n\n    };\n\n    Container.prototype = {\n        //Core service/factory method\n        provider,\n        //create new service\n        service,\n        //create new factory\n        factory,\n        //prepare/iialize services/factory with deps injected\n        access\n    };\n\n    return Container;\n\n}());"]}