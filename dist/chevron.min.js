var chevron = function(t) {
    "use strict";
    const n = (t, n) => Reflect.construct(t, n), e = (t, n) => (function() {
        return t(...n, ...arguments);
    });

    class s {
        constructor() {
            this.types = new Map, this.setType("service", e), this.setType("factory", n), this.injectables = new Map;
        }

        set(t, n, e, s) {
            this.injectables.set(t, this.createEntry(n, s, e));
        }

        has(t) {
            return this.injectables.has(t);
        }

        get(t) {
            return this.resolveEntry(t);
        }

        setType(t, n) {
            this.types.set(t, n);
        }

        hasType(t) {
            return this.types.has(t);
        }

        createEntry(t, n, e) {
            if (!this.hasType(t)) throw new Error(`Missing type '${t}'.`);
            const s = this.types.get(t), o = {
                isBootstrapped: !1, content: n, bootstrap: () => {
                    const t = e.map(t => this.get(t));
                    o.content = s(o.content, t);
                    o.isBootstrapped = !0;
                }
            };
            return o;
        }

        resolveEntry(t) {
            if (!this.has(t)) throw new Error(`Injectable '${t}' does not exist.`);
            const n = this.injectables.get(t);
            return n.isBootstrapped || n.bootstrap(), n.content;
        }
    }

    return t.Chevron = s, t;
}({});
//# sourceMappingURL=chevron.min.js.map
