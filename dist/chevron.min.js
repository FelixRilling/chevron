var chevron=function(t){"use strict";const n=(t,n)=>Reflect.construct(t,n),e=t=>t,s=(t,n)=>(function(){return t(...n,...arguments)});class o{constructor(){this.types=new Map,this.setType("service",s),this.setType("factory",n),this.setType("plain",e),this.injectables=new Map}get(t){return this.resolveEntry(t,new Set)}has(t){return this.injectables.has(t)}set(t,n,e,s){this.injectables.set(t,this.createEntry(n,s,e))}hasType(t){return this.types.has(t)}setType(t,n){this.types.set(t,n)}resolveEntry(t,n){if(n.has(t))throw new Error(`Circular dependencies were found: '${[...n,t].join("->")}'.`);if(!this.has(t))throw new Error(`Injectable '${t}' does not exist.`);const e=this.injectables.get(t);return e.isBootstrapped||(n.add(t),e.bootstrap(n),n.delete(t)),e.content}createEntry(t,n,e){if(!this.hasType(t))throw new Error(`Missing type '${t}'.`);const s=this.types.get(t),o={isBootstrapped:!1,content:n,bootstrap:t=>{const n=e.map(n=>this.resolveEntry(n,t));o.content=s(o.content,n);o.isBootstrapped=!0}};return o}}return t.Chevron=o,t}({});
//# sourceMappingURL=chevron.min.js.map
