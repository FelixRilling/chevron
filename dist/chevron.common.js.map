{"version":3,"file":"chevron.common.js","sources":["../node_modules/lightdash/dist/esm/src/object/name.js","esm/src/bootstrap/DefaultBootstrappings.js","esm/src/scope/DefaultScopes.js","esm/src/Chevron.js","esm/src/decorators/Injectable.js","esm/src/decorators/Autowired.js"],"sourcesContent":["import { isObject, isString, isSymbol } from \"lodash\";\n/**\n * Gets name of a value.\n *\n * If the value has a name or description property, the value of that is returned.\n * If the value is a string, it is returned as is.\n * Otherwise null is returned.\n *\n * @since 10.2.0\n * @memberOf Object\n * @param value Value to check.\n * @returns The name of the value.\n * @example\n * name(class Foo{})\n * // => \"Foo\"\n *\n * name(function bar(){})\n * // => \"bar\"\n *\n * name(Symbol(\"abc\"))\n * // => \"abc\"\n *\n * name(\"foo\")\n * // => \"foo\"\n *\n * name(1)\n * // => null\n */\nconst name = (value) => {\n    if (isString(value)) {\n        return value;\n    }\n    // eslint-disable-next-line no-extra-parens\n    if (isObject(value) && isString(value.name)) {\n        // eslint-disable-next-line no-extra-parens\n        return value.name;\n    }\n    if (isSymbol(value) && isString(value.description)) {\n        return value.description;\n    }\n    return null;\n};\nexport { name };\n//# sourceMappingURL=name.js.map","import { isFunction } from \"lodash\";\nconst createNonFunctionInitializerError = () => new TypeError(\"Non-functions cannot be bootstrapped by this bootstrapper.\");\nconst classBootstrapping = (initializer, dependencies) => {\n    if (!isFunction(initializer)) {\n        throw createNonFunctionInitializerError();\n    }\n    return Reflect.construct(initializer, dependencies);\n};\nconst functionBootstrapping = (initializer, dependencies) => (...args) => {\n    if (!isFunction(initializer)) {\n        throw createNonFunctionInitializerError();\n    }\n    return initializer(...dependencies, ...args);\n};\nconst identityBootstrapping = (initializer) => initializer;\nconst DefaultBootstrappings = {\n    CLASS: classBootstrapping,\n    FUNCTION: functionBootstrapping,\n    IDENTITY: identityBootstrapping\n};\nexport { DefaultBootstrappings };\n//# sourceMappingURL=DefaultBootstrappings.js.map","const singletonScope = (context, injectableEntryName) => `SINGLETON_${injectableEntryName}`;\nconst prototypeScope = () => null;\nconst DefaultScopes = {\n    SINGLETON: singletonScope,\n    PROTOTYPE: prototypeScope\n};\nexport { DefaultScopes };\n//# sourceMappingURL=DefaultScopes.js.map","import { defaults, isNil, isString } from \"lodash\";\nimport { name as getName } from \"lightdash\";\nimport { DefaultBootstrappings } from \"./bootstrap/DefaultBootstrappings\";\nimport { DefaultScopes } from \"./scope/DefaultScopes\";\nconst guessName = (initializer) => {\n    const guessedName = getName(initializer);\n    if (isNil(guessedName)) {\n        throw new TypeError(`Could not guess name of ${initializer}, please explicitly define one.`);\n    }\n    return guessedName;\n};\nconst getInjectableName = (name) => isString(name) ? name : guessName(name);\nconst createCircularDependencyError = (entryName, resolveStack) => {\n    return new Error(`Circular dependencies found: '${[...resolveStack, entryName].join(\"->\")}'.`);\n};\n/**\n * Injectable container class.\n *\n * @class\n */\nclass Chevron {\n    constructor() {\n        this.injectables = new Map();\n    }\n    /**\n     * Registers a new injectable on this container.\n     *\n     * @param initializer Initial value of this injectable. This can be any value, but usually  a class or a different kind of function.\n     *      During retrieval, the initial value might be transformed by the bootstrapper (see {@link Bootstrapping} for details).\n     *      If no name is provided in the options (see description of the options parameter, section \"name\"),\n     *      a name will be determined from the initializer through {@link getName}.\n     * @param dependencies Definitions of this injectables dependencies. Values can be either plain strings (\"MyOtherService\"),\n     *      or a value which is nameable. For details on nameable values see {@link getName}.\n     * @param options Options for this injectable. The following options exist:\n     *      <ul>\n     *          <li>name:\n     *                  Name for this injectable. If this is not provided, the name will be determined based on the initializer.\n     *                  (see description of the initializer parameter)\n     *          </li>\n     *          <li>bootstrapping:\n     *                  Bootstrapping strategy to use when instantiating this injectable (see {@link Bootstrapping} for details).\n     *                  By default, {@link DefaultBootstrappings.IDENTITY} is used. If your injectable is a class or factory function,\n     *                  consider using {@link DefaultBootstrappings.CLASS} or {@link DefaultBootstrappings.FUNCTION} instead respectively,\n     *                  or provide your own.\n     *          </li>\n     *          <li>scope:\n     *                  Scoping strategy to use when retrieving instances (see {@link Scope} for details).\n     *                  By default, {@link DefaultScopes.SINGLETON} is used. For different use cases,\n     *                  see {@link DefaultScopes.PROTOTYPE} or provide your own.\n     *          </li>\n     *      </ul>\n     * @throws Error when an injectable with the requested name is already registered.\n     * @throws TypeError when no name can be determined for this injectable or any of its dependencies.\n     */\n    registerInjectable(initializer, dependencies, options = {}) {\n        const { bootstrapping, scope, name } = defaults(options, {\n            bootstrapping: DefaultBootstrappings.IDENTITY,\n            scope: DefaultScopes.SINGLETON,\n            name: null\n        });\n        const injectableEntryName = !isNil(name)\n            ? name\n            : guessName(initializer);\n        if (this.injectables.has(injectableEntryName)) {\n            throw new Error(`Name already exists: '${injectableEntryName}'.`);\n        }\n        this.injectables.set(injectableEntryName, {\n            initializer,\n            bootstrapping,\n            scope,\n            dependencies: dependencies.map(getInjectableName),\n            instances: new Map()\n        });\n    }\n    /**\n     * Checks if an injectable with the name provided is registered for this container, regardless if its instantiated or not.\n     * To check if an injectable is registered and instantiated, see {@link #hasInjectableInstance}.\n     *\n     * @param name Either a raw string name or a nameable value that should be checked for. See {@link #registerInjectable} for details.\n     * @return if an injectable with the name provided is registered on this container.\n     * @throws TypeError when no name can be determined for the provided nameable.\n     */\n    hasInjectable(name) {\n        return this.injectables.has(getInjectableName(name));\n    }\n    /**\n     * Checks if an injectable with the name provided is registered and instantiated for this container.\n     * To check if an injectable is registered without checking for instantiation, see {@link #hasInjectable}.\n     *\n     * @param name Either a raw string name or a nameable value that should be checked for. See {@link #registerInjectable} for details.\n     * @param context Context to be used for instance checks. See {@link Scope} for details.\n     * @return if an injectable with the name provided is registered and instantiated on this container.\n     * @throws TypeError when no name can be determined for the provided nameable.\n     */\n    hasInjectableInstance(name, context = null) {\n        if (!this.hasInjectable(name)) {\n            return false;\n        }\n        const { injectableEntry, instanceName } = this.resolveInjectableInstance(getInjectableName(name), context);\n        return (instanceName != null && injectableEntry.instances.has(instanceName));\n    }\n    /**\n     * Retrieves an instantiated injectable, recursively instantiating dependencies if they were not instantiated before.\n     *\n     * @param name Either a raw string name or a nameable value that should be retrieved. See {@link #registerInjectable} for details.\n     * @param context Context to be used for instance checks. See {@link Scope} for details.\n     * @return instantiated injectable for the given name.\n     * @throws TypeError when no name can be determined for the provided nameable.\n     * @throws Error when a dependency cannot be found.\n     * @throws Error when recursive dependencies are detected.\n     */\n    getInjectableInstance(name, context = null) {\n        return this.getBootstrappedInjectableInstance(getInjectableName(name), context, new Set());\n    }\n    resolveInjectableInstance(injectableEntryName, context) {\n        if (!this.injectables.has(injectableEntryName)) {\n            throw new Error(`Injectable '${name}' does not exist.`);\n        }\n        const injectableEntry = this.injectables.get(injectableEntryName);\n        const instanceName = injectableEntry.scope(context, injectableEntryName, injectableEntry);\n        return {\n            injectableEntry,\n            instanceName\n        };\n    }\n    getBootstrappedInjectableInstance(injectableEntryName, context, resolveStack) {\n        const { injectableEntry, instanceName } = this.resolveInjectableInstance(injectableEntryName, context);\n        if (instanceName != null &&\n            injectableEntry.instances.has(instanceName)) {\n            return injectableEntry.instances.get(instanceName);\n        }\n        /*\n         * Start bootstrapping value.\n         */\n        if (resolveStack.has(injectableEntryName)) {\n            throw createCircularDependencyError(injectableEntryName, resolveStack);\n        }\n        resolveStack.add(injectableEntryName);\n        const bootstrappedDependencies = injectableEntry.dependencies.map(dependencyName => this.getBootstrappedInjectableInstance(dependencyName, context, resolveStack));\n        const instance = injectableEntry.bootstrapping(injectableEntry.initializer, bootstrappedDependencies, injectableEntryName, injectableEntry);\n        if (instanceName != null) {\n            injectableEntry.instances.set(instanceName, instance);\n        }\n        resolveStack.delete(injectableEntryName);\n        return instance;\n    }\n}\nexport { Chevron };\n//# sourceMappingURL=Chevron.js.map","const Injectable = (instance, dependencies, options = {}) => (target) => {\n    instance.registerInjectable(target, dependencies, options);\n    return target;\n};\nexport { Injectable };\n//# sourceMappingURL=Injectable.js.map","const Autowired = (instance, name, context = null) => (target, propertyKey) => {\n    target[propertyKey] = instance.getInjectableInstance(name, context);\n};\nexport { Autowired };\n//# sourceMappingURL=Autowired.js.map"],"names":["name","isString","isObject","isSymbol","isFunction","getName","isNil","defaults"],"mappings":"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"}