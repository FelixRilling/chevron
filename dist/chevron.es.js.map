{"version":3,"sources":["es6/chevron.es.js"],"names":[],"mappings":"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","file":"chevron.es.js","sourcesContent":["const _more = \": \";\nconst _error = \"error in \";\nconst _factory = \"factory\";\nconst _service = \"service\";\nconst _isUndefined = \" is undefined\";\n\n/**\n * Checks if service exist, else add it\n *\n * @param {String} type The type of the service (service/factory)\n * @param {Function} cf The Constructor function of the service\n * @param {String} name The name to register/id the service\n * @param {Array} deps List of dependencies\n * @param {Function} fn Content of the service\n * @returns {Object} Returns `this`\n */\nfunction provider (type, cf, name, deps, fn) {\n    const _this = this;\n\n    if (_this.chev[name]) {\n        //throw error if a service with this name already exists\n        throw _this.id + _more + _error + name + \" already exists\";\n    } else {\n        //Add the service to container\n        _this.chev[name] = {\n            type,\n            cf,\n            name,\n            deps,\n            fn,\n            init: false\n        };\n\n        return _this;\n    }\n}\n\n/**\n * Adds a new service type\n *\n * @param {String} type The name of the type\n * @param {Function} cf Constructor function to init the service with\n * @returns {Object} Returns `this`\n */\nfunction extend (type, cf) {\n    const _this = this;\n\n    //Add customType method to container\n    _this[type] = function (name, deps, fn) {\n        return _this.provider(type, cf, name, deps, fn);\n    };\n\n    return _this;\n}\n\n/**\n * Collects dependencies and initializes service\n *\n * @private\n * @param {Object} _this The context\n * @param {Object} service The service to check\n * @param {Object} list The list of dependencies\n * @returns {Object} Returns `service`\n */\nfunction initialize (_this, service, list) {\n    if (!service.init) {\n        const bundle = [];\r\n\n        //Collect an ordered Array of dependencies\n        service.deps.forEach(item => {\n            const dependency = list[item];\n\n            if (dependency) {\n                bundle.push(dependency.fn);\n            }\n        });\n\n        //Init service\n        //Call Constructor fn with service/deps\n        service = service.cf(service, bundle);\n        service.init = true;\n    }\n\n    return service;\n}\n\n/**\n * Loops trough dependencies, recurse if new dependencies has dependencies itself; then execute fn.\n *\n * @private\n * @param {Object} _this The context\n * @param {Array} service The dependencyList to iterate\n * @param {Function} fn The function run over each dependency\n * @returns void\n */\nfunction recurseDependencies(_this, service, fn) {\n    //loop trough deps\n    service.deps.forEach(name => {\n        const dependency = _this.chev[name];\n\n        if (dependency) {\n            //recurse over sub-deps\n            recurseDependencies(_this, dependency, fn);\n            //run fn\n            fn(dependency);\n        } else {\n            //if not found error with name\n            throw _this.id + _more + _error + service.name + _more + \"dependency \" + name + _isUndefined;\n        }\n    });\n}\n\n/**\n * Check if every dependency is available\n *\n * @private\n * @param {Object} _this The context\n * @param {Object} service The service to prepare\n * @returns {Object} Initialized service\n */\nfunction prepare(_this, service) {\n    const list = {};\n\n    //Recurse trough service deps\n    recurseDependencies(\n        _this,\n        service,\n        //run this over every dependency to add it to the dependencyList\n        dependency => {\n            //make sure if dependency is initialized, then add\n            list[dependency.name] = initialize(_this, dependency, list);\n        }\n    );\n\n    return initialize(_this, service, list);\n}\n\n/**\n * Access service with dependencies bound\n *\n * @param {String} name The Name of the service\n * @returns {*} Returns Content of the service\n */\nfunction access(name) {\n    const _this = this,\n        accessedService = _this.chev[name];\n\n    //Check if accessed service is registered\n    if (accessedService) {\n        //Call prepare with bound context\n        return prepare(_this, accessedService).fn;\n    }\n}\n\n/**\n * Creates method entry for service\n *\n * @private\n * @param {Object} _this The context\n * @returns Returns void\n */\nfunction initService(_this) {\n    _this.extend(_service, function(service, bundle) {\n        //Construct service\n        const serviceFn = service.fn;\n\n        service.fn = function() {\n            //Chevron service function wrapper\n            return serviceFn.apply(null, bundle.concat(Array.from(arguments)));\n        };\n\n        return service;\n    });\n}\n\n/**\n * Creates method entry for factory\n *\n * @private\n * @param {Object} _this The context\n * @returns Returns void\n */\nfunction initFactory(_this) {\n    _this.extend(_factory, function(service, bundle) {\n        //Construct factory\n\n        //First value gets ignored by calling new like this, so we need to fill it\n        bundle.unshift(null);\n\n        //Apply into new constructor by accessing bind proto. from: http://stackoverflow.com/questions/1606797/use-of-apply-with-new-operator-is-this-possible\n        service.fn = new(Function.prototype.bind.apply(service.fn, bundle));\n\n        return service;\n    });\n}\n\n/**\r\n * Basic Chevron Constructor\r\n *\r\n * @constructor\r\n * @param {String} id To identify the instance\r\n * @returns {Object} Returns Chevron instance\r\n */\r\nlet Chevron = function(id) {\r\n    const _this = this;\r\n\r\n    //Instance Id\r\n    _this.id = id || \"cv\";\r\n    //Instance container\r\n    _this.chev = {};\r\n\r\n    //Init default types\r\n    initService(_this);\r\n    initFactory(_this);\r\n};\r\n\r\n/**\r\n * Expose Chevron methods\r\n */\r\nChevron.prototype = {\r\n    //Core service/factory method\r\n    provider,\r\n    //Prepare/init services/factory with deps injected\r\n    access,\r\n    //Add new service type\r\n    extend\r\n};\n\nexport default Chevron;"]}