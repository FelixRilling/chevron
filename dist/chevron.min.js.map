{"version":3,"sources":["chevron.js"],"names":["Chevron","typeService","_module","dependencies","console","log","serviceFn","fn","apply","concat","Array","from","arguments","typeFactory","unshift","Function","prototype","bind","construct","$map","cf","constructedModule","deps","forEach","depName","dependency","get","Error","push","init","[object Object]","_this","this","Map","extend","typeName","id","provider","entry","set"],"mappings":"AAMA,GAAIA,SAAW,WACf,YAEA,MAAMC,GAAc,SAAUC,EAASC,GACnCC,QAAQC,IAAI,UAAWH,EAASC,EAGhC,MAAMG,GAAYJ,EAAQK,EAQ1B,OANAL,GAAQK,GAAK,WAGT,MAAOD,GAAUE,MAAM,KAAML,EAAaM,OAAOC,MAAMC,KAAKC,cAGzDV,GAGLW,EAAc,SAAUX,EAASC,GAUnC,MATAC,SAAQC,IAAI,UAAWH,EAASC,GAGhCA,EAAaW,QAAQ,GAIrBZ,EAAQK,GAAK,IAAKQ,SAASC,UAAUC,KAAKT,MAAMN,EAAQK,GAAIJ,IAErDD,GAGLgB,EAAY,SAAUC,EAAMjB,EAASkB,GACvC,KAAMjB,KACN,IAAIkB,EAeJ,OAbAnB,GAAQoB,KAAKC,QAAQC,IACjB,KAAMC,GAAaN,EAAKO,IAAIF,EAE5B,KAAIC,EAGA,KAAM,IAAIE,OAAM,WAAaH,EAF7BrB,GAAayB,KAAKH,EAAWI,QAAS,EAAOJ,EAAWlB,GAAKkB,EAAWP,eAMhFG,EAAoBD,EAAGlB,EAASC,GAChCD,EAAQ2B,MAAO,EAERR,EAAkBd,IAQvBP,QACF8B,cACI,KAAMC,GAAQC,IAGdD,GAAMZ,KAAO,GAAIc,KAEjBF,EAAMG,OAAO,UAAWjC,GACxB8B,EAAMG,OAAO,UAAWrB,GAE5BiB,OAAOK,EAAUf,GACb,KAAMW,GAAQC,IAEdD,GAAMI,GAAY,SAAUC,EAAId,EAAMf,GAClCwB,EAAMM,SAASD,EAAId,EAAMf,EAAIa,IAGrCU,SAASM,EAAId,EAAMf,EAAIa,GACnB,KAAMW,GAAQC,KACRM,GACFhB,KAAAA,EACAf,GAAAA,EACAsB,MAAM,EACNX,UAAW,WACP,MAAOA,GAAUa,EAAMZ,KAAMmB,EAAOlB,IAI5CW,GAAMZ,KAAKoB,IAAIH,EAAIE,GAEvBR,OAAOM,GACH,KAAMlC,GAAU8B,KAAKb,KAAKO,IAAIU,EAE9B,OAAOlC,GAAQ2B,KAAO3B,EAAQK,GAAKL,EAAQgB,aAInD,OAAOlB","file":"chevron.min.js","sourcesContent":["/**\n * Chevron 7.0.0\n * Author: Felix Rilling\n * Repository: git+https://github.com/FelixRilling/chevronjs.git\n */\n\nvar Chevron = (function () {\n'use strict';\n\nconst typeService = function (_module, dependencies) {\n    console.log(\"SERVICE\", _module, dependencies);\n\n    //Dereference fn to avoid unwanted recursion\n    const serviceFn = _module.fn;\n\n    _module.fn = function () {\n        //Chevron service function wrapper\n        //return function with args injected\n        return serviceFn.apply(null, dependencies.concat(Array.from(arguments)));\n    };\n\n    return _module;\n};\n\nconst typeFactory = function (_module, dependencies) {\n    console.log(\"FACTORY\", _module, dependencies);\n\n    //First value gets ignored by calling 'new' like this, so we need to fill it with something\n    dependencies.unshift(0);\n\n    //Apply into new constructor by binding applying the bind method.\n    //@see: {@link http://stackoverflow.com/questions/1606797/use-of-apply-with-new-operator-is-this-possible }\n    _module.fn = new (Function.prototype.bind.apply(_module.fn, dependencies))();\n\n    return _module;\n};\n\nconst construct = function ($map, _module, cf) {\n    const dependencies = [];\n    let constructedModule;\n\n    _module.deps.forEach(depName => {\n        const dependency = $map.get(depName);\n\n        if (dependency) {\n            dependencies.push(dependency.init === true ? dependency.fn : dependency.construct());\n        } else {\n            throw new Error(\"missing \" + depName);\n        }\n    });\n\n    constructedModule = cf(_module, dependencies);\n    _module.init = true;\n\n    return constructedModule.fn;\n};\n\n/**\n * Chevron Constructor\n * @constructor\n * @returns {Object} Chevron instance\n */\nconst Chevron = class {\n    constructor() {\n        const _this = this;\n\n        //Instance container\n        _this.$map = new Map();\n\n        _this.extend(\"service\", typeService);\n        _this.extend(\"factory\", typeFactory);\n    }\n    extend(typeName, cf) {\n        const _this = this;\n\n        _this[typeName] = function (id, deps, fn) {\n            _this.provider(id, deps, fn, cf);\n        };\n    }\n    provider(id, deps, fn, cf) {\n        const _this = this;\n        const entry = {\n            deps,\n            fn,\n            init: false,\n            construct: function () {\n                return construct(_this.$map, entry, cf);\n            }\n        };\n\n        _this.$map.set(id, entry);\n    }\n    access(id) {\n        const _module = this.$map.get(id);\n\n        return _module.init ? _module.fn : _module.construct();\n    }\n};\n\nreturn Chevron;\n\n}());\n\n//# sourceMappingURL=chevron.js.map\n"]}