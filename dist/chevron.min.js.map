{"version":3,"sources":["chevron.js"],"names":["Chevron","typeService","moduleContent","dependencies","serviceFn","apply","concat","Array","from","arguments","typeFactory","dependenciesArr","unshift","Function","prototype","bind","ChevronMain","[object Object]","_this","this","$map","Map","extend","typeName","constructorFunction","id","deps","fn","provider","moduleName","_module","rdy","init","forEach","depName","dependency","get","Error","push","set"],"mappings":"AAMA,GAAIA,SAAW,WACf,YAEA,MAAMC,GAAc,SAAUC,EAAeC,GAEzC,KAAMC,GAAYF,CAQlB,OANAA,GAAgB,WAGZ,MAAOE,GAAUC,MAAM,KAAMF,EAAaG,OAAOC,MAAMC,KAAKC,eAM9DC,EAAc,SAAUR,EAAeC,GAEzC,KAAMQ,GAAkBJ,MAAMC,KAAKL,EAQnC,OANAQ,GAAgBC,QAAQ,GAIxBV,EAAgB,IAAKW,SAASC,UAAUC,KAAKV,MAAMH,EAAeS,KAShEK,QAMFC,cACI,KAAMC,GAAQC,IAGdD,GAAME,KAAO,GAAIC,KAGjBH,EAAMI,OAAO,UAAWrB,GACxBiB,EAAMI,OAAO,UAAWZ,GAQ5BO,OAAOM,EAAUC,GACb,KAAMN,GAAQC,IAOd,OAJAD,GAAMK,GAAY,SAAUE,EAAIC,EAAMC,GAClCT,EAAMU,SAASH,EAAIC,EAAMC,EAAIH,IAG1BN,EAUXD,SAASY,EAAYH,EAAMC,EAAIH,GAC3B,KAAMN,GAAQC,KACRW,GACFJ,KAAAA,EACAC,GAAAA,EACAI,KAAK,EAKLC,KAAM,WACF,KAAM7B,KAiBN,OAdA2B,GAAQJ,KAAKO,QAAQC,IACjB,KAAMC,GAAajB,EAAME,KAAKgB,IAAIF,EAElC,KAAIC,EAGA,KAAM,IAAIE,mBAAmBH,KAF7B/B,GAAamC,KAAKH,EAAWJ,IAAMI,EAAWR,GAAKQ,EAAWH,UAOtEF,EAAQH,GAAKH,EAAoBM,EAAQH,GAAIxB,GAC7C2B,EAAQC,KAAM,EAEPD,EAAQH,IAMvB,OAFAT,GAAME,KAAKmB,IAAIV,EAAYC,GAEpBZ,EAOXD,OAAOY,GACH,KAAMC,GAAUX,KAAKC,KAAKgB,IAAIP,EAE9B,OAAOC,GAAQC,IAAMD,EAAQH,GAAKG,EAAQE,QAIlD,OAAOhB","file":"chevron.min.js","sourcesContent":["/**\n * Chevron 7.0.0\n * Author: Felix Rilling\n * Repository: git+https://github.com/FelixRilling/chevronjs.git\n */\n\nvar Chevron = (function () {\n'use strict';\n\nconst typeService = function (moduleContent, dependencies) {\n    //Dereference fn to avoid unwanted recursion\n    const serviceFn = moduleContent;\n\n    moduleContent = function () {\n        //Chevron service function wrapper\n        //return function with args injected\n        return serviceFn.apply(null, dependencies.concat(Array.from(arguments)));\n    };\n\n    return moduleContent;\n};\n\nconst typeFactory = function (moduleContent, dependencies) {\n    //dereference array, because we dont wanna mutate the arg\n    const dependenciesArr = Array.from(dependencies);\n    //First value gets ignored by calling 'new' like this, so we need to fill it with something\n    dependenciesArr.unshift(0);\n\n    //Apply into new constructor by binding applying the bind method.\n    //@see: {@link http://stackoverflow.com/questions/1606797/use-of-apply-with-new-operator-is-this-possible }\n    moduleContent = new (Function.prototype.bind.apply(moduleContent, dependenciesArr))();\n\n    return moduleContent;\n};\n\n/**\n * Chevron Class\n * @class\n */\nconst ChevronMain = class {\n    /**\n     * Chevron Constructor\n     * @constructor\n     * @returns {Chevron} Chevron instance\n     */\n    constructor() {\n        const _this = this;\n\n        //Instance container\n        _this.$map = new Map();\n\n        //Adds default types\n        _this.extend(\"service\", typeService);\n        _this.extend(\"factory\", typeFactory);\n    }\n    /**\n     * Defines a new module type\n     * @param {String} typeName name of the new type\n     * @param {Function} constructorFunction function init modules with\n     * @returns {Chevron} Chevron instance\n     */\n    extend(typeName, constructorFunction) {\n        const _this = this;\n\n        //stores type with name into instance\n        _this[typeName] = function (id, deps, fn) {\n            _this.provider(id, deps, fn, constructorFunction);\n        };\n\n        return _this;\n    }\n    /**\n     * Defines a new module\n     * @param {String} moduleName name of the module\n     * @param {Array} deps array of dependency names\n     * @param {Function} fn module content\n     * @param {Function} constructorFunction function init the modules with\n     * @returns {Chevron} Chevron instance\n     */\n    provider(moduleName, deps, fn, constructorFunction) {\n        const _this = this;\n        const _module = {\n            deps,\n            fn,\n            rdy: false,\n            /**\n             * Inits the module\n             * @returns {Mixed} Module content\n             */\n            init: function () {\n                const dependencies = [];\n\n                //Collects dependencies\n                _module.deps.forEach(depName => {\n                    const dependency = _this.$map.get(depName);\n\n                    if (dependency) {\n                        dependencies.push(dependency.rdy ? dependency.fn : dependency.init());\n                    } else {\n                        throw new Error(`Missing '${ depName }'`);\n                    }\n                });\n\n                //Calls constructorFunction on the module\n                _module.fn = constructorFunction(_module.fn, dependencies);\n                _module.rdy = true;\n\n                return _module.fn;\n            }\n        };\n\n        _this.$map.set(moduleName, _module);\n\n        return _this;\n    }\n    /**\n     * Access and init a module\n     * @param {String} moduleName name of the module to access\n     * @returns {Mixed} module content\n     */\n    access(moduleName) {\n        const _module = this.$map.get(moduleName);\n\n        return _module.rdy ? _module.fn : _module.init();\n    }\n};\n\nreturn ChevronMain;\n\n}());\n\n//# sourceMappingURL=chevron.js.map\n"]}