{"version":3,"sources":["/dist/chevron.min.js"],"names":["Chevron","extend","type","cf","_this","this","name","deps","fn","provider","constructModule","_module","list","constructorFunction","dependencies","result","forEach","item","dependency","push","rdy","recurseDependencies","chev","get","Error","initialize","init","entry","set","access","service","serviceFn","apply","concat","Array","from","arguments","factory","unshift","Function","prototype","bind","Map"],"mappings":"AAMA,GAAIA,SAAW,WACf,YASA,IAAIC,GAAS,SAAgBC,EAAMC,GAC/B,GAAIC,GAAQC,IAYZ,OATAD,GAAMF,GAAQ,SAAUI,EAAMC,EAAMC,GAChC,MAAOJ,GAAMK,SAASP,EACtBC,EACAG,EACAC,EACAC,IAIGJ,GAYPM,EAAkB,SAAyBC,EAASC,EAAMC,GAC1D,GAAIC,MACAC,EAAS,MAgBb,OAbAJ,GAAQJ,KAAKS,QAAQ,SAAUC,GAC3B,GAAIC,GAAaN,EAAKK,EAGlBC,IACAJ,EAAaK,KAAKD,EAAWV,MAKrCO,EAASF,EAAoBF,EAASG,GACtCC,EAAOK,KAAM,EAENL,GAWPM,EAAsB,QAASA,GAAoBC,EAAMX,EAASH,GAClEG,EAAQJ,KAAKS,QAAQ,SAAUV,GAC3B,GAAIY,GAAaI,EAAKC,IAAIjB,EAE1B,KAAIY,EAOA,KAAM,IAAIM,OAAMb,EAAQL,KAAO,oBAAsBA,EAAO,IAL5De,GAAoBC,EAAMJ,EAAYV,GAEtCA,EAAGU,MAgBXO,EAAa,SAAoBH,EAAMX,EAASE,GAChD,GAAID,KAUJ,OAPAS,GAAoBC,EAAMX,EAE1B,SAAUO,GAENN,EAAKM,EAAWZ,MAAQY,EAAWE,IAAMF,EAAaA,EAAWQ,SAG9DhB,EAAgBC,EAASC,EAAMC,IAYtCJ,EAAW,SAAkBP,EAAMW,EAAqBP,EAAMC,EAAMC,GACpE,GAAIJ,GAAQC,KACRsB,GACAzB,KAAMA,EACNI,KAAMA,EACNC,KAAMA,EACNC,GAAIA,EACJY,KAAK,EACLM,KAAM,WACF,MAAOD,GAAWrB,EAAMkB,KAAMK,EAAOd,IAO7C,OAFAT,GAAMkB,KAAKM,IAAItB,EAAMqB,GAEdvB,GASPyB,EAAS,SAAgBvB,GAC3B,MAAOD,MAAKiB,KAAKC,IAAIjB,GAAMoB,OAAOlB,IAWhCsB,EAAU,SAAiBnB,EAASG,GAEpC,GAAIiB,GAAYpB,EAAQH,EAQxB,OANAG,GAAQH,GAAK,WAGT,MAAOuB,GAAUC,MAAM,KAAMlB,EAAamB,OAAOC,MAAMC,KAAKC,cAGzDzB,GAWP0B,EAAU,SAAiB1B,EAASG,GAQpC,MANAA,GAAawB,QAAQ,GAIrB3B,EAAQH,GAAK,IAAK+B,SAASC,UAAUC,KAAKT,MAAMrB,EAAQH,GAAIM,IAErDH,GAQPX,EAAU,WACV,GAAII,GAAQC,IASZ,OANAD,GAAMkB,KAAO,GAAIoB,KAGjBtC,EAAMH,OAAO,UAAW6B,GACxB1B,EAAMH,OAAO,UAAWoC,GAEjBjC,EAYX,OANAJ,GAAQwC,WACJvC,OAAQA,EACRQ,SAAUA,EACVoB,OAAQA,GAGL7B","file":"chevron.min.js","sourcesContent":["/**\n * Chevron 6.3.6\n * Author: Felix Rilling\n * Repository: git+https://github.com/FelixRilling/chevronjs.git\n */\n\nvar Chevron = (function () {\n'use strict';\n\n/**\r\n * Adds a new module type to the Chevron instance\r\n * @param {String} type The name of the type\r\n * @param {Function} cf Constructor function to init the module with\r\n * @returns {Object} Chevron instance\r\n */\n\nvar extend = function extend(type, cf) {\n    var _this = this;\n\n    //Add customType method to container\n    _this[type] = function (name, deps, fn) {\n        return _this.provider(type, //static\n        cf, //static\n        name, //dynamic\n        deps, //dynamic\n        fn //dynamic\n        );\n    };\n\n    return _this;\n};\n\n/**\r\n * Collects dependencies and initializes module\r\n * @private\r\n * @param {Object} _module The module to check\r\n * @param {Object} list The list of dependencies\r\n * @param {Function} cf The Constructor function\r\n * @returns {Object} Initialized module\r\n */\n\nvar constructModule = function constructModule(_module, list, constructorFunction) {\n    var dependencies = [];\n    var result = void 0;\n\n    //Collect an ordered Array of dependencies\n    _module.deps.forEach(function (item) {\n        var dependency = list[item];\n\n        //If the dependency name is found in the list of deps, add it\n        if (dependency) {\n            dependencies.push(dependency.fn);\n        }\n    });\n\n    //Call Constructor fn with module and dependencies\n    result = constructorFunction(_module, dependencies);\n    result.rdy = true;\n\n    return result;\n};\n\n/**\r\n * Loops trough dependencies, recurse if new dependencies has dependencies itself; then execute fn.\r\n * @private\r\n * @param {Object} chev The chevron container\r\n * @param {Array} _module The module to recurse\r\n * @param {Function} fn The function run over each dependency\r\n */\n\nvar recurseDependencies = function recurseDependencies(chev, _module, fn) {\n    _module.deps.forEach(function (name) {\n        var dependency = chev.get(name);\n\n        if (dependency) {\n            //recurse over sub-deps\n            recurseDependencies(chev, dependency, fn);\n            //run fn\n            fn(dependency);\n        } else {\n            //if the dependency is not found, throw error with name\n            throw new Error(_module.name + \" is missing dep '\" + name + \"'\");\n        }\n    });\n};\n\n/**\r\n * Inits module and all dependencies\r\n * @private\r\n * @param {Object} chev The chevron container\r\n * @param {Object} _module The module to prepare\r\n * @param {Function} cf The constructor function\r\n * @returns {Object} Initialized module\r\n */\nvar initialize = function initialize(chev, _module, constructorFunction) {\n    var list = {};\n\n    //Recurse trough module dependencies\n    recurseDependencies(chev, _module,\n    //run this over every dependency to add it to the dependencyList\n    function (dependency) {\n        //Add the dependency, and init it if its not ready\n        list[dependency.name] = dependency.rdy ? dependency : dependency.init();\n    });\n\n    return constructModule(_module, list, constructorFunction);\n};\n\n/**\r\n * Adds a new module to the container\r\n * @param {String} type The type of the module. ex: \"factory\"\r\n * @param {Function} cf The constructor function of the module\r\n * @param {String} name The name to register the module under. ex: \"myFactory\"\r\n * @param {Array} deps Array of dependenciy names\r\n * @param {Function} fn Content of the module\r\n * @returns {Object} Chevron instance\r\n */\nvar provider = function provider(type, constructorFunction, name, deps, fn) {\n    var _this = this;\n    var entry = {\n        type: type, //Type of the module\n        name: name, //Name of the module\n        deps: deps, //Array of dependencies\n        fn: fn, //Module content function\n        rdy: false, //If the module is ready to access\n        init: function init() {\n            return initialize(_this.chev, entry, constructorFunction); //init the module\n        }\n    };\n\n    //Saves entry to chev container\n    _this.chev.set(name, entry);\n\n    return _this;\n};\n\n/**\r\n * Access module with dependencies bound\r\n * @param {String} name The name of the module to access\r\n * @returns {Mixed} Initialized Object content\r\n */\n\nvar access = function access(name) {\n  return this.chev.get(name).init().fn;\n};\n\n/**\r\n * Constructor function for the service module type\r\n * @private\r\n * @param {Object} _module The module object\r\n * @param {Array} dependencies Array of dependencies\r\n * @returns {Mixed} Initialized module\r\n */\n\nvar service = function service(_module, dependencies) {\n    //Dereference fn to avoid unwanted recursion\n    var serviceFn = _module.fn;\n\n    _module.fn = function () {\n        //Chevron service function wrapper\n        //return function with args injected\n        return serviceFn.apply(null, dependencies.concat(Array.from(arguments)));\n    };\n\n    return _module;\n};\n\n/**\r\n * Constructor function for the factory module type\r\n * @private\r\n * @param {Object} _module The module object\r\n * @param {Array} dependencies Array of dependencies\r\n * @returns {Mixed} Initialized module\r\n */\n\nvar factory = function factory(_module, dependencies) {\n    //First value gets ignored by calling 'new' like this, so we need to fill it with something\n    dependencies.unshift(0);\n\n    //Apply into new constructor by binding applying the bind method.\n    //@see: {@link http://stackoverflow.com/questions/1606797/use-of-apply-with-new-operator-is-this-possible }\n    _module.fn = new (Function.prototype.bind.apply(_module.fn, dependencies))();\n\n    return _module;\n};\n\n/**\r\n * Chevron Constructor\r\n * @constructor\r\n * @returns {Object} Chevron instance\r\n */\nvar Chevron = function Chevron() {\n    var _this = this;\n\n    //Instance container\n    _this.chev = new Map();\n\n    //Init default types\n    _this.extend(\"service\", service);\n    _this.extend(\"factory\", factory);\n\n    return _this;\n};\n\n/**\r\n * Expose Chevron methods\r\n */\nChevron.prototype = {\n    extend: extend, //Creates a new module type\n    provider: provider, //Adds a new custom module to the container\n    access: access //Returns initialized module\n};\n\nreturn Chevron;\n\n}());\n\n//# sourceMappingURL=chevron.js.map\n"]}