{"version":3,"sources":["chevron.js"],"names":["Chevron","typeService","_module","dependencies","serviceFn","fn","apply","concat","Array","from","arguments","typeFactory","dependenciesArr","unshift","Function","prototype","bind","construct","$map","cf","constructedModule","deps","forEach","depName","dependency","get","Error","push","rdy","init","[object Object]","_this","this","Map","extend","typeName","constructorFunction","id","provider","set"],"mappings":"AAMA,GAAIA,SAAW,WACf,YAEA,MAAMC,GAAc,SAAUC,EAASC,GAEnC,KAAMC,GAAYF,EAAQG,EAQ1B,OANAH,GAAQG,GAAK,WAGT,MAAOD,GAAUE,MAAM,KAAMH,EAAaI,OAAOC,MAAMC,KAAKC,cAGzDR,GAGLS,EAAc,SAAUT,EAASC,GAEnC,KAAMS,GAAkBJ,MAAMC,KAAKN,EAQnC,OANAS,GAAgBC,QAAQ,GAIxBX,EAAQG,GAAK,IAAKS,SAASC,UAAUC,KAAKV,MAAMJ,EAAQG,GAAIO,IAErDV,GAGLe,EAAY,SAAUC,EAAMhB,EAASiB,GACvC,KAAMhB,KACN,IAAIiB,EAgBJ,OAbAlB,GAAQmB,KAAKC,QAAQC,IACjB,KAAMC,GAAaN,EAAKO,IAAIF,EAE5B,KAAIC,EAGA,KAAM,IAAIE,mBAAmBH,KAF7BpB,GAAawB,KAAKH,EAAWI,IAAMJ,EAAWnB,GAAKmB,EAAWK,UAMtET,EAAoBD,EAAGjB,EAASC,GAChCD,EAAQ0B,KAAM,EAEPR,EAAkBf,IAQvBL,QACF8B,cACI,KAAMC,GAAQC,IAGdD,GAAMb,KAAO,GAAIe,KAGjBF,EAAMG,OAAO,UAAWjC,GACxB8B,EAAMG,OAAO,UAAWvB,GAE5BmB,OAAOK,EAAUC,GACb,KAAML,GAAQC,IAOd,OAJAD,GAAMI,GAAY,SAAUE,EAAIhB,EAAMhB,GAClC0B,EAAMO,SAASD,EAAIhB,EAAMhB,EAAI+B,IAG1BL,EAEXD,SAASO,EAAIhB,EAAMhB,EAAI+B,GACnB,KAAML,GAAQC,KACR9B,GACFmB,KAAAA,EACAhB,GAAAA,EACAuB,KAAK,EACLC,KAAM,WACF,MAAOZ,GAAUc,EAAMb,KAAMhB,EAASkC,IAM9C,OAFAL,GAAMb,KAAKqB,IAAIF,EAAInC,GAEZ6B,EAEXD,OAAOO,GACH,KAAMnC,GAAU8B,KAAKd,KAAKO,IAAIY,EAE9B,OAAOnC,GAAQ0B,IAAM1B,EAAQG,GAAKH,EAAQ2B,QAIlD,OAAO7B","file":"chevron.min.js","sourcesContent":["/**\n * Chevron 7.0.0\n * Author: Felix Rilling\n * Repository: git+https://github.com/FelixRilling/chevronjs.git\n */\n\nvar Chevron = (function () {\n'use strict';\n\nconst typeService = function (_module, dependencies) {\n    //Dereference fn to avoid unwanted recursion\n    const serviceFn = _module.fn;\n\n    _module.fn = function () {\n        //Chevron service function wrapper\n        //return function with args injected\n        return serviceFn.apply(null, dependencies.concat(Array.from(arguments)));\n    };\n\n    return _module;\n};\n\nconst typeFactory = function (_module, dependencies) {\n    //dereference array, because we dont wanna mutate the arg\n    const dependenciesArr = Array.from(dependencies);\n    //First value gets ignored by calling 'new' like this, so we need to fill it with something\n    dependenciesArr.unshift(0);\n\n    //Apply into new constructor by binding applying the bind method.\n    //@see: {@link http://stackoverflow.com/questions/1606797/use-of-apply-with-new-operator-is-this-possible }\n    _module.fn = new (Function.prototype.bind.apply(_module.fn, dependenciesArr))();\n\n    return _module;\n};\n\nconst construct = function ($map, _module, cf) {\n    const dependencies = [];\n    let constructedModule;\n\n    //Collects dependencies\n    _module.deps.forEach(depName => {\n        const dependency = $map.get(depName);\n\n        if (dependency) {\n            dependencies.push(dependency.rdy ? dependency.fn : dependency.init());\n        } else {\n            throw new Error(`missing '${ depName }'`);\n        }\n    });\n\n    constructedModule = cf(_module, dependencies);\n    _module.rdy = true;\n\n    return constructedModule.fn;\n};\n\n/**\n * Chevron Constructor\n * @constructor\n * @returns {Object} Chevron instance\n */\nconst Chevron = class {\n    constructor() {\n        const _this = this;\n\n        //Instance container\n        _this.$map = new Map();\n\n        //Adds default types\n        _this.extend(\"service\", typeService);\n        _this.extend(\"factory\", typeFactory);\n    }\n    extend(typeName, constructorFunction) {\n        const _this = this;\n\n        //stores type with name into instance\n        _this[typeName] = function (id, deps, fn) {\n            _this.provider(id, deps, fn, constructorFunction);\n        };\n\n        return _this;\n    }\n    provider(id, deps, fn, constructorFunction) {\n        const _this = this;\n        const _module = {\n            deps,\n            fn,\n            rdy: false,\n            init: function () {\n                return construct(_this.$map, _module, constructorFunction);\n            }\n        };\n\n        _this.$map.set(id, _module);\n\n        return _this;\n    }\n    access(id) {\n        const _module = this.$map.get(id);\n\n        return _module.rdy ? _module.fn : _module.init();\n    }\n};\n\nreturn Chevron;\n\n}());\n\n//# sourceMappingURL=chevron.js.map\n"]}